<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Modifying Product Properties</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Modifying Product Properties</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2><a name="Top"></a>Abstract</h2>
		<p>This article discusses the CAAPstModifyingProperties use case. This use 
		case demonstrates the steps involved in modifying the properties of PLM 
		Product Ref and Rep Ref through using knowledge APIs. It is an illustration 
		of the use of API fully detailed in the referenced technical article [<a href="#References">1</a>]</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAAPstModifyingProperties Use Case</a>
				<ul>
					<li><a href="#What">What Does the CAAPstModifyingProperties 
						Do</a></li>
					<li><a href="#How">How to Launch CAAPstModifyingProperties</a></li>
					<li><a href="#Where">Where to Find the CAAPstModifyingProperties 
						Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#History">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>The primary objective of this use case is to familiarize the user with the some 
API of the KnowledgeInterfaces framework for modifying various attributes associated 
with a PLM Component. The use case also demonstrates that certain attributes like
<strong>V_organization</strong> are &quot;<strong>read only</strong>&quot; and hence 
cannot be modified.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAAPstModifyingProperties Use Case</h2>
<p>CAAPstModifyingProperties is a use case of the CAAProductStructure.edu framework 
that illustrates the KnowledgeInterfaces and PLMDictionaryNavServices frameworks 
capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAAPstModifyingProperties Do</h3>
<p>The use case primarily modifies the attributes of either a Product Ref or a Rep 
Ref. For simplicity we haven't considered modifying attributes of a First Instance 
or Rep Inst, in this use case.</p>
<p>The use case, loads a Product Model as shown in the fig below [<a href="#Fig1">Fig. 
1</a>]. User can load any input model of his choice and hence the one depicted below, 
only serves as an example, to help user understand the scenario representing this 
Use case.</p>
<table>
	<caption><a name="Fig1">Fig. 1:</a> Input Product Model</caption>
	<tr>
		<td>
		<img alt="Input Product Model" height="196" src="images/CAAPstModifyingProperties_InputModel.jpg" width="509"/></td>
	</tr>
</table>
<p>The input model [<a href="#Fig1">Fig. 1</a>] has the root CAAPstModifyingProperties_Root 
which aggregates the following beneath it.</p>
<ul>
	<li>CAAPstModifyingProperties_Rep.1 an instance of Rep Ref CAAPstModifyingProperties_Rep.</li>
</ul>
<p>We have run the use case on this model to modify the <strong>PLM_ExternalID</strong> 
of the Root to <strong>MyValue</strong>. The traces (extract) of the use case execution 
have been reproduced below.</p>
<pre class="code">
   The input attribute: PLM_ExternalID exists, and is Read/Write
   The value of PLM_ExternalID attribute is: CAAPstModifyingProperties_Root
   The Component has been successfully valuated
   The value of PLM_ExternalID attribute is now: MyValue
</pre>
<p>Its possible to change the attributes of a Rep Ref too, in a manner similar to 
that of the Root Ref above.</p>
<p>An important point to note here is that only those attributes which are &quot;<strong>writable</strong>&quot; 
can be modified. While there are a few attributes like V_organization which are &quot;<strong>read 
only</strong>&quot;, and thus cannot be modified.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAAPstModifyingProperties</h3>
<p>To launch CAAPstModifyingProperties, you will need to set up the build time environment, 
then compile CAAPstModifyingProperties along with its prerequisites, set up the 
run time environment, and then execute the use case [<a href="#References">2</a>].</p>
<p>To launch the use case execute the command:</p>
<p><code>mkrun -c &quot;CAAPstModifyingProperties Repository Server User Password 
SecurityCtx PLM_ExternalID Version Attribute_Name Attribute_Value PLMType PLMChildType&quot;</code></p>
<p>where:</p>
<table class="fill">
	<tr>
		<th>Repository</th>
		<td>
		<script type="text/javascript">insertRepository();</script>
		</td>
	</tr>
	<tr>
		<th>Server</th>
		<td>The server as ServerName:ServerPort/rootURI</td>
	</tr>
	<tr>
		<th>User</th>
		<td>The user name</td>
	</tr>
	<tr>
		<th>Password</th>
		<td>The user password to authenticate the user</td>
	</tr>
	<tr>
		<th>SecurityCtx</th>
		<td>a string representing the security context (Role.Organization.Project). 
		Choose Role as Designer (as the use case modifies the PLM Data).</td>
	</tr>
	<tr>
		<th>PLM_ExternalID</th>
		<td>The PLM_ExternalID of a PLM Reference or PLM Representation Reference 
		value of the input model</td>
	</tr>
	<tr>
		<th>V_version</th>
		<td>The V_version of a PLM Reference or PLM Representation Reference</td>
	</tr>
	<tr>
		<th>Attribute_Name</th>
		<td>the internal name of the attribute (not the alias name) to be modified</td>
	</tr>
	<tr>
		<th>Attribute_Value</th>
		<td>value to be updated with</td>
	</tr>
	<tr>
		<th>PLMType</th>
		<td>A String Representing PLM Type</td>
	</tr>
	<tr>
		<th>PLMChildType</th>
		<td>A String Representing PLM Type For Child</td>
	</tr>
</table>
<p>* The input model is retrieved by importing the CAAPstModifyingProperties.3dxml 
file from the CAAProductStructure.edu fwk.</p>
<p><code>InstallRootFolder\CAADoc\CAAProductStructure.edu\InputData\CAAPstModifyingProperties.3dxml</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">2</a>] is the folder 
where the API CD-ROM is installed.</p>
<p>This 3D XML file contains the root Product Reference with the following attributes:</p>
<ul>
	<li>PLM_ExternalID: <code>CAAPstModifyingProperties_Root</code></li>
	<li>Version: ---</li>
</ul>
<p>Here we have provided a 3D XML file only for the convenience of the user so that 
one doesn't have to recreate the input model. It can simply be imported from this 
file, and used for the execution further. But the user does have the liberty to 
use any input model of his choice, based on his discretion.</p>
<p><strong>Attention</strong>: Please refer to the document [<a href="#References">2</a>] 
for how to import and re-import such a 3D XML file in your PLM repository.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAAPstModifyingProperties Code</h3>
<p>The CAAPstModifyingProperties use case is located in the CAAPstModifyingProperties.m 
module of the CAAProductStructure.edu framework:</p>
<p><code>InstallRootFolder\CAADoc\CAAProductStructure.edu\CAAPstModifyingProperties.m\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">2</a>] is the folder 
where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>Following are the main steps in CAAPstModifyingProperties:</p>
<ol>
	<li><a href="#Prolog">Prolog</a></li>
	<li><a href="#Step1">Retrieving the PLM Component to Modify</a></li>
	<li><a href="#Step2">Confirming that the Attribute to Be Revaluated Is One among 
		the List of Attributes of the Moaded PLM Component</a></li>
	<li><a href="#Step3">Retrieving the Current Attribute Value</a></li>
	<li><a href="#Step4">Setting a New Value to the Input Attribute</a></li>
	<li><a href="#Epilog">Epilog</a></li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Prolog"></a>Prolog</h3>
<p>The CAAPstModifyingProperties use case begins by creating a session and connecting 
to the Input Repository. This, being the most fundamental prerequisite for all batch 
use cases, it is the first step in their execution.</p>
<p>In this case, we create a session and connect to Repository with the Designer 
Role (since PLM Component attributes are being modified). There are other parameters 
as well, details of which can be found in the &quot;Connecting to V6 Server&quot; 
use case article [<a href="#References">3</a>]. This article primarily deals with 
Opening and Closing a PLM session.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Retrieving the PLM Component to Modify</h3>
<p>This step involves opening a <strong>PLM Product Ref</strong>, with an initial 
assumption that the PLM Component input, is a PLM Reference. On failure, the execution 
proceeds with an assumption that the PLM entity being processed is a <strong>PLM 
Rep Ref</strong>.</p>
<pre class="code">
...
  <strong>CATICkeObject</strong>* piComp = NULL;
  <strong>CATOmbLifeCycleRootsBag</strong> Bag;
  <strong>CATAdpOpenParameters</strong> params(CATAdpExpandParameters::Navigation);
  <strong>CATAdpOpener</strong> opener(Bag,params);
  hr= opener.<strong>CompleteAndOpen</strong>(opiIDComp,IID_CATICkeObject, (void**) &amp;piComp);
...</pre>
<p>The use case calls <code>CompleteAndOpen</code> API of <em>CATAdpOpener</em> 
for opening a PLM Product Ref and Rep Ref. The PLM Product Ref and Rep Ref are retrieved 
as <em>CATICkeObject</em> interface pointer.</p>
<p>The article &quot;Querying, Expanding &amp; Opening PLM Object&quot; [<a href="#References">4</a>] 
provides the details of the CAA recommended routines for PLM Product Ref and Rep 
Ref retrieval.</p>
<p>The loading the input model in <strong>Navigation mode</strong>, since for this 
use case we intend to retrieve and modify the properties of only the PLM Components 
included in the base Product model (we don't load in memory the PLM Product Representation 
Reference, PLM Product Representation Instance, the Port and Connections).</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Confirming that the Attribute to Be Revaluated Is One among 
the List of Attributes of the Moaded PLM Component</h3>
<p>This step is not mandatory since the API to retrieve or modify an attribute of 
a PLM Component will fail in case of wrong PLM Attribute. We have added this step 
to show another API of knowledge that you could use in your application.</p>
<pre class="code">...
  CATUnicodeString iUAttrName = iArgv[8];
  <strong>CATAttributeInfos</strong>* AttrInfos = NULL ; 
  hr = <strong>CATCkePLMNavPublicServices::FindAttributeFromObject</strong>(CATCkePLMTypeAttrServices::All,
	                                                     piComp,
                                                             iUAttrName,
				                             AttrInfos,TRUE); 											
  ...
  <strong>if (NULL == AttrInfos)</strong>
  {
    cout &lt;&lt; "   The attribute whose value is to be modified is not associated with the PLM Component" &lt;&lt; endl;
    return 1 ;
...</pre>
<p>The <code>FindAttributeFromObject</code> is one method of the <em>CATCkePLMNavPublicServices</em>. 
It enables you to retrieve information on a given PLM Attribute associated with 
PLM Component. So the arguments of this method are:</p>
<ul>
	<li>An enum to specify the scope of research among the PLM Attributes (All, 
		Mandatory, Optional, IdentifierSet).</li>
	<li>The <em>CATICkeObject</em> interface pointer (smart pointer) on the PLM 
		Component.</li>
	<li>The output argument, a <em>CATAttributeInfos</em> class object. That is 
		a class to get information on a PLM Attribute type (name, type, default 
		value) [<a href="#References">1</a>].</li>
	<li>The last argument is a filter of search: among the the Read/Write PLM Attribute 
		only (TRUE), or all (Read/Write + ReadOnly) (FALSE).</li>
</ul>
<p>After the <code>FindAttributeFromObject</code> call, we delete <code>AttrInfos</code>.</p>
<p>One significant point to note is that the <code>FindAttributeFromObject</code> 
API returns <strong>S_OK</strong>, even if the attribute is invalid for the PLM 
Component In this case though, an empty Attribute Info object is returned (a NULL
<em>CATAttributeInfos</em>* pointer).</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Retrieving the Current Attribute Value</h3>
<pre class="code">...
  CATUnicodeString ValueAsStringBefore;
  hr = <strong>CATCkeObjectAttrReadServices</strong>::<strong>GetValueAsString</strong>(pCkeObjectOnComp,iUAttrName,ValueAsStringBefore);	
...</pre>
<p>Using <code>pCkeObjectOnComp,</code> the interface pointer on the loaded PLM 
Component you can get the value of the input PLM Attribute (<code>iUAttrName</code>).
<code>GetValueAsString</code> method of <em>CATCkeObjectAttrReadServices</em> class 
retrieves the value as a string (attention this method only works for PLM attribute 
of type string or enum. Have a look to the &quot;Get and Set through Specific Methods&quot; 
section of the referenced article [<a href="#References">1</a>] to know which method 
to use according to the PLM Attribute type. Don't forget that <code>GetValue</code> 
method of the same class, returning a <em>CATIValue</em>, is valid whatever the 
PLM attribute type.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step4"></a>Valuating the Input Attribute</h3>
<p>The current value of the attribute to be revaluated is retrieved here.</p>
<pre class="code">...
CATUnicodeString iUAttrValueInput= iArgv[10];
hr = <strong>CATCkeObjectAttrWriteServices::SetValueWithString</strong>(pCkeObjectOnComp,iUAttrName,iUAttrValueInput);                                                       
...</pre>
<p>Using <code>pCkeObjectOnComp</code>, the interface pointer on the loaded PLM 
Component you can valuate the value of the input PLM Attribute (<code>iUAttrName</code>).
<code>SetValueAsString</code> method of <em>CATCkeObjectAttrWriteServices</em> class 
modifies the value as a string (attention this method only works for PLM attribute 
of type string or enum). Have a look to the &quot;Get and Set through Specific Methods&quot; 
section of the referenced article [<a href="#References">1</a>] to know which method 
to use according to the PLM Attribute type. Don't forget that S<code>etValue</code> 
method of the same class, with a <em>CATIValue</em>, is valid whatever the PLM attribute 
type.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Epilog"></a>Epilog</h3>
<p>The CAAPstModifyingProperties use case ends by simply saving and closing the 
PLM session. Since all PS use cases necessarily conclude by closing the PLM session, 
we have a dedicated article on this topic viz. &quot;Connection to V6 Server&quot; 
[<a href="#References">3</a>].</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>The use case demonstrates the use of:</p>
<ul>
	<li>CATCkePLMNavPublicServices::FindAttributeFromObject to look for information 
		on a PLM Attribute type.</li>
	<li>CATCkeObjectAttrWriteServices to modify a PLM Attribute value.</li>
	<li>CATCkeObjectAttrWriteServices to read a PLM Attribute value.</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAAPlmPLMCompAttribute/CAAPLMTaAllKnowPLMAttributes.htm">
		Accessing PLM Attributes</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
	<tr>
		<td>[3]</td>
		<td>
		<a href="../CAAPlmServerAccess/CAAAdpUcBasicBatch.htm">
		Connecting to V6 Server</a></td>
	</tr>
	<tr>
		<td>[4]</td>
		<td>
		<a href="../CAAPlmServerAccess/CAAAdpUcQueryOpen.htm">
		Querying, Expanding &amp; Opening PLM Components</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>3</strong> [Nov 2010]</td>
		<td>Document updated to introduce CATCkePLMNavPublicServices</td>
	</tr>
	<tr>
		<td>Version: <strong>2</strong> [Jul 2008]</td>
		<td>Document modified to update occurrence model navigation</td>
	</tr>
	<tr>
		<td>Version: <strong>1</strong> [Jul 2006]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
