<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Instantiating Representation Reference</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Instantiating Representation Reference</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article discusses the CAAPstInstRepRef use case. This use case explains 
		how to Instantiate a Representation Reference below a Reference.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAAPstInstRepRef Use Case</a>
				<ul>
					<li><a href="#What">What Does the CAAPstInstRepRef Use Case 
						Do</a></li>
					<li><a href="#How">How to Launch the CAAPstInstRepRef Use Case</a></li>
					<li><a href="#Where">Where to Find the CAAPstInstRepRef Use 
						Case code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>The primary objective of this use case is to enable you to get familiar with 
the steps involved in instantiating a Representation Reference under a Product Reference.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAAPstInstRepRef Use Case</h2>
<p>CAAPstInstRepRef is a use case of the CAAProductStructure.edu framework that 
illustrates the ProductStructureInterfaces framework capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAAPstInstRepRef Do</h3>
<p>To begin with we have an input model consisting of a Root Reference CAAPstInstRepRef_Root, 
as seen in <a href="#Fig1">Fig. 1</a> below.</p>
<table>
	<caption><a name="Fig1"></a>Fig. 1: The Input Model</caption>
	<tr>
		<td>
		<img alt="The Input Model" height="73" src="images/CAAPstInstRepRef_InputModel.jpg" width="229"/></td>
	</tr>
</table>
<p>The use case instantiates a Rep Ref viz. <strong>CAAPstInstRepRef_RepRef</strong> under
<strong>CAAPstInstRepRef_Root</strong> as depicted in <a href="#Fig2">Fig. 2</a> below.</p>
<table>
	<caption><a name="Fig2"></a>Fig. 2: The Output Model</caption>
	<tr>
		<td>
		<img alt="The Output Model" height="188" src="images/CAAPstInstRepRef_UseCaseTreatment.jpg" width="471"/></td>
	</tr>
</table>
<p>The output model is as seen below when viewed in CATIA. It displays a pad, which 
is the 3D Geometry associated with the Rep Ref instantiated under the Root Reference,
<strong>CAAPstInstRepRef_Root</strong>.</p>
<table>
	<caption><a name="Fig3"></a>Fig. 3 The Output Model as Seen in CATIA</caption>
	<tr>
		<td>
		<img alt="The Output Model as Seen in CATIA" height="313" src="images/CAAPstInstRepRef_OutputModel.jpg" width="549"/></td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAAPstInstRepRef</h3>
<p>To launch CAAPstInstRepRef, you will need to set up the build time environment, 
then compile CAAPstInstRepRef along with its prerequisites, set up the run time 
environment, and then execute the use case [<a href="#References">1</a>].</p>
<p>To launch the use case execute the command:</p>
<p><code>mkrun -c &quot;CAAPstInstRepRef Repository Server User Password SecurityCtx 
PLM_ExternalID_Root version_Root PLM_ExternalID_RepRef version_RepRef PLMType PLMChildType&quot;</code></p>
<p>where:</p>
<table class="fill">
	<tr>
		<th>Repository</th>
		<td>
		<script type="text/javascript">insertRepository();</script>
		</td>
	</tr>
	<tr>
		<th>Server</th>
		<td>The server as ServerName:ServerPort/rootURI</td>
	</tr>
	<tr>
		<th>User</th>
		<td>The user name</td>
	</tr>
	<tr>
		<th>Password</th>
		<td>The user password to authenticate the user</td>
	</tr>
	<tr>
		<th>SecurityCtx</th>
		<td>a string representing the security context (Role.Organization.Project). 
		Choose Role as Designer (as the use case modifies/creates the PLM Data).</td>
	</tr>
	<tr>
		<th>PLM_ExternalID_Root</th>
		<td>PLM_ExternalID of Root Reference (*)</td>
	</tr>
	<tr>
		<th>version_Root</th>
		<td>version of Root (*)</td>
	</tr>
	<tr>
		<th>PLM_ExternalID_RepRef</th>
		<td>PLM_ExternalID of Rep Reference (*)</td>
	</tr>
	<tr>
		<th>version_RepRef</th>
		<td>version of Rep Ref (*)</td>
	</tr>
	<tr>
		<th>PLMType</th>
		<td>A String Representing PLM Type</td>
	</tr>
	<tr>
		<th>PLMChildType</th>
		<td>A String Representing PLM Type for Child</td>
	</tr>
</table>
<p>* The input model for Root Reference is retrieved by importing the CAAPstInstRepRef_RootRef.3dxml file from the CAAProductStructure.edu 
fwk.</p>
<p><code>InstallRootFolder\CAADoc\CAAProductStructure.edu\InputData\CAAPstInstRepRef_RootRef.3dxml</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<p>This 3D XML file contains the <strong>Root Reference</strong>
with the following attributes:</p>
<ul>
	<li><code>PLM_ExternalID</code>: <code>CAAPstInstRootRef_Root</code></li>
	<li><code>Version</code>: ---</li>
</ul>
<p>A similar exercise will have to be done for importing the CAAPstInstRepRef_RepRef.3dxml 
file to the repository from the CAAProductStructure.edu fwk. It exists at the same 
location where the earlier 3D XML file has been provided.</p>
<p>This 3D XML file contains the Rep Reference with the following attributes:</p>
<ul>
	<li><code>PLM_ExternalID</code>: <code>CAAPstInstRepRef_RepRef</code></li>
	<li><code>Version</code>: ---</li>
</ul>
<p><strong>Attention</strong>: Please refer to the document [<a href="#References">1</a>] 
for how to import and reimport such a 3D XML file in your PLM repository.</p>
<p>The PLM_ExternalID attribute value of the imported model is typically of the 
format &quot;CAAPstInstRootRef_Root + ID String + #&quot;, where ID String is an 
Identification string as specified by the user while importing a 3D XML file to 
CATIA. # is increment count.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAAPstInstRepRef Code</h3>
<p>The CAAPstInstRepRef use case is located in the CAAPstInstRepRef.m module of 
the CAAProductStructure.edu framework:</p>
<p><code>InstallRootFolder\CAADoc\CAAProductStructure.edu\CAAPstInstRepRef.m</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>There are six main steps in CAAPstInstRepRef:</p>
<ol>
	<li><a href="#Prolog">Prolog</a></li>
	<li><a href="#Step1">Opening the Input Product Reference in Authoring Mode</a></li>
	<li><a href="#Step2">Counting the Rep Insts Aggregated under the Input Product 
		Ref and Displaying the Count</a></li>
	<li><a href="#Step3">Opening the Rep Ref to Be Instantiated</a></li>
	<li><a href="#Step4">Instantiating the Rep Ref</a></li>
	<li><a href="#Epilog">Epilog</a></li>
</ol>
<p>We will now extract the code corresponding to each of those sections and provide 
comments, for better understanding of the users.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Prolog"></a>Prolog</h3>
<p>The CAAPstInstRepuse case begins by creating a session and connecting to the 
Input Repository. This, being the most fundamental prerequisite for all batch use 
cases, it is the first step in their execution.</p>
<p>In this case, we create a session &amp; connect to Repository with the Designer 
Role (since we are modifying PLM data). There are other parameters as well, details 
of which can be found in the &quot;Connecting to V6 Server&quot; use case article 
[<a href="#References">2</a>]. This article primarily deals with opening and closing 
a PLM session.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Opening the Input Product Reference in Authoring Mode</h3>
<p>Here we open the input Product Reference in Authoring mode.</p>
<pre class="code">...
	CATIPLMRepInstances* piRepInst = NULL;
         <strong>CATOmbLifeCycleRootsBag</strong> Bag;
	<strong>CATAdpOpenParameters</strong> params(CATAdpExpandParameters::Navigation);
	<strong>CATAdpOpener</strong> opener(Bag,params);
	hr= opener.<strong>CompleteAndOpen</strong>(opiIDComp,IID_CATIPLMRepInstances, (void**) &amp;piRepInst);
...</pre>
<p>The use case calls <code>CompleteAndOpen</code> method of <em>CATAdpOpener</em> 
class opens the object. The article &quot;Querying, Expanding &amp; Opening PLM 
Object&quot; [<a href="#References">3</a>] has a section which provides an explanation 
on the <code>CompleteAndOpen()</code> method of the <code>CATAdpOpener</code> class.</p>
<p>These api's opens the Product Reference given its identifying attributes (<strong>PLM_ExternalID, 
V_version</strong>) and return the requested Interface, a <em>CATIPLMRepInstances</em>* 
on the Reference here.</p>
<p>The UC loads the entire Product Model, which includes the Base model with the 
accompanying Rep Instances &amp; Ports.</p>
<p>The Base Product Model is restricted to the Root Reference &amp; the Product 
Reference + Instances beneath it.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Counting the Rep Insts Aggregated under the Input Product 
Ref and Displaying the Count</h3>
<p>We retrieve the total number of Rep Insts aggregated under the input Product 
Reference.</p>
<pre class="code">...
  int iCount = 0;
  <strong>hr = piRepInst-&gt;Count(iCount);</strong>
  ...</pre>
<p>The <code>CATIPLMRepInstance::Count</code> api takes a single out argument viz.</p>
<ul>
	<li><code>int iCount</code>, the number of rep insts aggregated under the invoking 
		Reference.</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Opening the Rep Ref to Be Instantiated</h3>
<p>The input Representation Reference is loaded in session.</p>
<pre class="code">	CATUnicodeString PLM_ExternalIDValue_RepRef = iArgv[8];
	CATUnicodeString V_versionValue_repref = iArgv[9];
      ...
	CATIPsiRepresentationReference* piRepRef = NULL;
	...
	hr= opener.<strong>CompleteAndOpen</strong>(opiIDComp2,IID_CATIPsiRepresentationReference, (void**) &amp;<strong>piRepRef</strong>);
    ...
</pre>
<p>The method of <code>CompleteAndOpen</code> of <em>CATAdpOpen</em> class opens 
the Representation Reference is detailed in the article &quot;Querying, Expanding &amp; 
Opening PLM Object&quot; [<a href="#References">3</a>]. Here <code>piIDComp2</code> 
is identificator of Rep ref.</p>
<p>Here we seek a <em>CATIPsiRepresentationReference</em>* piRepRef through this 
global service.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step4"></a>Instantiating the Rep Ref</h3>
<p>We instantiate the Rep Ref loaded in an earlier step under the input Product 
Reference.</p>
<pre class="code">	...
      const CATUnicodeString iRepInstName(&quot;WheelRepInst&quot;);
	CATBaseUnknown* oRepInstance = NULL;
	hr = <strong>piRepInst-&gt;AddRepInstance(iRepInstName,piRepRef,oRepInstance);</strong>
...	</pre>
<p><code>CATIPLMRepInstances::AddRepInstance</code> takes the following arguments:</p>
<ul>
	<li><em>CATUnicodeString</em> <code>iRepInstName</code>, the rep inst name.</li>
	<li><em>CATIPsiRepresentationReference</em>* <code>piRepRef</code>, the pointer 
		to the Rep ref to be instantiated.</li>
	<li><em>CATBaseUnknown</em>* <code>oRepInstance</code>, pointer to the newly 
		create rep inst.</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Epilog"></a>Epilog</h3>
<p>The CAAPstInstRepRef use case ends by saving the newly created Product model &amp; 
finally closing the PLM session.</p>
<p>Since most of the batch use cases save the PLM data the &quot;Saving PLM Components&gt;&quot;[<a href="#References">4</a>] 
use case exclusively deals on this subject.</p>
<p>Also all batch use cases conclude by closing the PLM session, we have a dedicated 
article on this topic viz. &quot;Connecting to V6 Server&quot; [<a href="#References">2</a>].</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>We have seen the steps involved in instantiating a Rep ref under Product References.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td>
		<a href="../CAAPlmServerAccess/CAAAdpUcBasicBatch.htm">
		Connecting to V6 Server</a></td>
	</tr>
	<tr>
		<td>[3]</td>
		<td>
		<a href="../CAAPlmServerAccess/CAAAdpUcQueryOpen.htm">
		Querying, Expanding &amp; Opening PLM Object</a></td>
	</tr>
	<tr>
		<td>[4]</td>
		<td>
		<a href="../CAAPlmServerAccess/CAAAdpUcSave.htm">
		Saving PLM Components</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Apr 2006]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
