<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Working with Occurrences</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Working with Occurrences</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This article details the CAAPstWorkingWithOccurrences >use 
		case. This use case illustrates to an end user, the methodology to work 
		with Occurrences in his applications. This could involve retrieving an Occurrence 
		given a path of First Instances. The other way round, the UC also illustrates 
		retrieving from an Occurrence, its associated path of First Instances in 
		a Reference-Instance model.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAAPstWorkingWithOccurrences Use Case</a>
				<ul>
					<li><a href="#What">What Does CAAPstWorkingWithOccurrences Do</a></li>
					<li><a href="#How">How to Launch CAAPstWorkingWithOccurrences</a></li>
					<li><a href="#Where">Where to Find the CAAPstWorkingWithOccurrences 
						Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#References">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>The goal of this use case is to illustrate how to work with Occurrences using 
the <em>CATIPrdOccurrenceMngt</em> interface. More precisely, you will learn how 
to:</p>
<ul>
	<li>Create the Product Occurrence model.</li>
	<li>Compute an Occurrence, given its path of instances.</li>
	<li>Retrieve a Path for an Occurrence.</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAAPstWorkingWithOccurrences Use Case</h2>
<p>CAAPstWorkingWithOccurrences is a use case of the CAAProductStructure.edu 
framework that illustrates ProductStructureInterfaces and ProductStructureUseItf 
framework capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAAPstWorkingWithOccurrences Do</h3>
<p>CAAPstWorkingWithOccurrences is a &quot;batch&quot; which illustrates 
the end-user how to work with Occurrences using the <em>CATIPrdOccurrenceMngt</em> 
API's.</p>
<p>The objective of this article is listed below:</p>
<ul>
	<li>Create the Product Occurrence model, using <code>CATIPrdOccurrenceMngt::GetOrCreateRootOccurrence</code>.</li>
	<li>Compute an Occurrence, given its path of instances, using <code>CATIPrdOccurrenceMngt::GetOccurrence</code>.</li>
	<li>Retrieve a Path for an Occurrence, using <code>CATIPrdOccurrenceMngt::FromOccurrenceToPathOfInstances</code>.</li>
</ul>
<p>The use case begins with creating a Product Structure. The Skate Reference/Instance 
Model created is as shown below.</p>
<table>
	<caption><a name="Fig1"></a>Fig.1: The Skate Reference/Instance Model</caption>
	<tr>
		<td>
		<img alt="Skate Reference/Instance Model" src="images/CAAPstWorkingWithOccurrences_Skate-RefInstModel.jpg"/></td>
	</tr>
</table>
<p>The use case further creates the Skate Occurrence model from its Reference/Instance 
model using <code>CATIPrdOccurrenceMngt::GetOrCreateRootOccurrence</code>.</p>
<table>
	<caption><a name="Fig2"></a>Fig.2: The Skate Occurrence Model</caption>
	<tr>
		<td>
		<img alt="Skate Occurrence Model" src="images/CAAPstWorkingWithOccurrences_SkateOccModel.jpg"/></td>
	</tr>
</table>
<p>The use case then illustrates the way to compute an Occurrence using <code>CATIPrdOccurrenceMngt::GetOccurrence</code>. 
In this use case, we retrieve the Rear Left Wheel occurrence (marked in Yellow in 
[<a href="#Fig2">Fig.2</a>] above). The use case further checks this retrieved Occurrence. 
Please note that this check is just to see whether the occurrence returned by this 
method is same as the occurrence retrieved by the Occurrence model.</p>
<p>The use case further retrieve a path for an occurrence using <code>CATIPrdOccurrenceMngt::FromOccurrenceToPathOfInstances</code>. 
In this use case, we retrieve the Path of instances (marked in orange in [<a href="#Fig1">Fig.1</a>] 
above) for Rear Left wheel.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAAPstWorkingWithOccurrences</h3>
<p>To launch CAAPstWorkingWithOccurrences, you will need to set up 
the build time environment and compile the <code>CAAPstWorkingWithOccurrences.m</code> 
module along with its prerequisites [<a href="#References">1</a>]. Once it's built, 
set up the run time environment and execute the following command:</p>
<p><code>mkrun -c &quot;<em>CAAPstWorkingWithOccurrences Repository Server User 
Password SecurityCtx</em>&quot;</code></p>
<p>where:</p>
<table class="fill">
	<tr>
		<th>Repository</th>
		<td>
		<script type="text/javascript">insertRepository();</script>
		</td>
	</tr>
	<tr>
		<th>Server</th>
		<td>The server as host::<em> name</em>:<em>port_number/RootURI</em></td>
	</tr>
	<tr>
		<th>User</th>
		<td>The user name</td>
	</tr>
	<tr>
		<th>Password</th>
		<td>The user password to authenticate the user</td>
	</tr>
	<tr>
		<th>SecurityCtx</th>
		<td>A string representing the security context (Role.Organization.Project). 
		Choose Role as Designer (as the use case create the PLM Data)</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAAPstWorkingWithOccurrences Code</h3>
<p>The CAAPstWorkingWithOccurrences use case is made of a single file located in 
the CAAPstWorkingWithOccurrences.m module of the CAAProductStructure.edu framework:</p>
<p><code>InstallRootFolder\CAAProductStructure.edu\CAAPstWorkingWithOccurrences.m\</code></p>
<p>And functions defined in the CAAAdpUtilities.m module of the CAAPLMClientAdapter.edu 
framework:</p>
<p><code>InstallRootFolder\CAAPLMClientAdapter.edu\CAAAdpUtilities.m\</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>There are four logical steps in CAAPstWorkingWithOccurrences:</p>
<ol>
	<li><a href="#ProductCreation">Creating the Skate Product Structure</a>
		<ul>
			<li><a href="#RefCreation">Creating Product References</a></li>
			<li><a href="#InstCreation">Creating and Adding Product Instances</a></li>
		</ul>
	</li>
	<li><a href="#OccurrenceCreation">Creating the Skate Occurrence Model</a></li>
	<li><a href="#ValidateOcc">Computing the Rear Left Wheel Occurrence</a>
		<ul>
			<li><a href="#ComputeByApi">Computing the Occurrence</a></li>
			<li><a href="#ComputeOccByNav">Retrieving the Occurrence from the Computed 
				Occurrence Model</a></li>
			<li><a href="#CheckOcc">Checking It Is the Same Occurrence (Using IsEqual)</a></li>
		</ul>
	</li>
	<li><a href="#ValidatePath">Computing the Path of Instances of the Rear Left 
		Wheel Occurrence</a>
		<ul>
			<li><a href="#RetrievePath">Retrieving the Path of Instances of the 
				Rear Left Wheel Occurrence</a></li>
			<li><a href="#CheckPath">Checking the Path of Instances</a></li>
		</ul>
	</li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="ProductCreation"></a>Creating the Skate Product Structure</h3>
<p>This section illustrates the creation of Skate Product structure. Please note 
that here we are creating Product References with implicit api's, hence the end 
user has to set the input environment as the current environment prior to the Product 
reference creation.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h4><a name="RefCreation"></a>Creating Product References</h4>
<p>We first create the various Product references (Skate , Axle, Wheel references) 
which are required for the Skate Product structure creation.</p>
<pre class="code">...
  CATIPrdReferenceFactory * pIPrdRefFactory = NULL ;
  hr = <strong>CATPrdFactory::CreatePrdFactory</strong>(IID_CATIPrdReferenceFactory,(void**) &amp;pIPrdRefFactory);
  ...
  CATIType_var spRefType;
  CATCkePLMNavPublicServices::RetrieveKnowledgeType("VPMReference", spRefType);
  CATListValCATICkeParm_var iPrdRefAttributesValues;
  CATIPLMProducts* pSkateRef  = NULL;
  CATIPLMProducts* pAxleRef  = NULL;
  CATIPLMProducts* pWheelRef = NULL;
  ...
  CATListValCATICkeParm_var iPrdRefAttributesValues;
  hr = pIPrdRefFactory-&gt;<strong>CreatePrdReference(spRefType, iPrdRefAttributesValues, pSkateRef, NULL);</strong>
  ...
  hr = pIPrdRefFactory-&gt;<strong>CreatePrdReference(spRefType, iPrdRefAttributesValues, pAxleRef, NULL);</strong>
  ...
  hr = pIPrdRefFactory-&gt;<strong>CreatePrdReference(spRefType, iPrdRefAttributesValues, pWheelRef, NULL);</strong>
...</pre>
<p>We first retrieve a pointer to the product factory (<em>CATIPrdReferenceFactory</em> 
*) by calling <code>CATPrdFactory::CreatePrdFactory</code> to create the product 
references.</p>
<p>Next, the Skate, Axle, and Wheel references are created using the retrieved product 
factory pointer by calling <code>CATIPrdReferenceFactory::CreatePrdReference</code>. 
This method takes four arguments:</p>
<ol>
	<li><code>spRefType</code>, a smart pointer to <em>CATIType</em>, retrieved 
		thanks to the <code>CATCkePLMNavPublicServices::RetrieveKnowledgeType</code> 
		static method. A product reference handled using a <em>CATIPLMProducts</em> 
		pointer is of the VPMReference PLM type.</li>
	<li><code>iPrdRefAttributesValues</code>, a smart pointer to <em>CATListValCATICkeParm</em>. 
		This list of PLM attributes must be empty since the PLM attributes of the 
		newly created object are valuated by the method.</li>
	<li><code>pSkateRef</code>, a pointer to <em>CATIPLMProducts</em> to handle 
		the created product reference.</li>
	<li>A pointer to <em>CATIAdpEnvironment</em>. To use the current environment, 
		set this pointer to NULL.</li>
</ol>
<p>To create the Skate Product structure ,the use case further deals with creating 
the instances and adding them under the created product references, whose details 
are illustrated in the next section.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h4><a name="InstCreation"></a>Creating and Adding Product Instances</h4>
<p>This section is the final step of the Skate Product structure creation. Here, 
we create the instances of the various product references (created in the previous 
step) and add them under the required product reference.</p>
<pre class="code">...
  CATBaseUnknown * pLeftWheel = NULL;
  CATBaseUnknown * pRightWheel = NULL;
  hr = pAxleRef-&gt;<strong>AddProduct (pWheelRef, pLeftWheel, IID_CATIPLMNavInstance );</strong>
  ...
  hr = pAxleRef-&gt;<strong>AddProduct (pWheelRef, pRightWheel, IID_CATIPLMNavInstance);</strong>
  ...
  CATBaseUnknown * pFrontAxle = NULL;
  CATBaseUnknown * pRearAxle = NULL;
  hr = pSkateRef-&gt;<strong>AddProduct (pAxleRef, pFrontAxle, IID_CATIPLMNavInstance );</strong>
  ...
  hr = pSkateRef-&gt;<strong>AddProduct (pAxleRef, pRearAxle, IID_CATIPLMNavInstance);</strong>
...</pre>
<p>At the end of this step , we have the Skate Reference/Instance model created 
as shown in [<a href="#Fig1">Fig.1</a>].</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="OccurrenceCreation"></a>Creating the Skate Occurrence Model</h3>
<p>Once the Skate product structure is created, we then create its occurrence model.</p>
<pre class="code">...   
  CATIPLMNavOccurrence_var spPLMNavOccurrenceOnRoot;
  <strong>CATIPrdOccurrenceMngt</strong>* occMngt = NULL;

  CATIPLMNavReference *piPLMNavRefOnRoot=NULL;
  hr= <strong>pSkateRef-&gt;</strong>QueryInterface(IID_CATIPLMNavReference,(void**)&amp;piPLMNavRefOnRoot);
  if(NULL!=piPLMNavRefOnRoot)
  {
    if(SUCCEEDED(CATPrdGetOccurrenceMngt(occMngt)) &amp;&amp; (NULL!= occMngt))
    {
      rc = occMngt-&gt;<strong>GetOrCreateRootOccurrence(piPLMNavRefOnRoot,spPLMNavOccurrenceOnRoot);</strong>
      ...
    }
...</pre>
<p>We have an interface <em>CATIPrdOccurrenceMngt</em> dedicated for managing the 
occurrence. Making a call to <code>CATIPrdOccurrenceMngt::GetOrCreateRootOccurrence</code> 
returns the root occurrence corresponding to the Skate Reference, provided as an 
input to this api. This input Skate reference is the one created in <a href="#RefCreation">Creating Product References</a>.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="ValidateOcc"></a>Computing the Rear Left Wheel Occurrence</h3>
<p>In this section, the use case computes the Rear left wheel occurrence . In the 
process, the use case also validates this retrieved Occurrence. Please note that 
this validation is just to check that the Occurrence retrieved using <code>CATIPrdOccurrenceMngt::GetOccurrence</code> 
API is correct. So , the use case retrieve the Rear left wheel occurrence by two 
ways: 1) Compute the occurrence by API , 2) Retrieve the occurrence from the computed 
occurrence model. The use case then compares the two occurrences using the method
<strong>IsEqual</strong>. So, we first begin with retrieving the occurrence using 
API, as explained below.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h4><a name="ComputeByApi"></a>Computing the Occurrence</h4>
<p>In this section , we retrieve the Rear Left wheel occurrence using the API.</p>
<pre class="code">...
  CATIPLMNavInstance * <strong>pNavInstOnRearAxle</strong>= (CATIPLMNavInstance *) pRearAxle;
  CATIPLMNavInstance * <strong>pNavInstOnLeftWheel</strong>= (CATIPLMNavInstance *) pLeftWheel;

  CATListPtrCATIPLMNavInstance <strong>pListOfInstForRearLeftWheel</strong>;
  pListOfInstForRearLeftWheel.Append(pNavInstOnRearAxle);
  pListOfInstForRearLeftWheel.Append(pNavInstOnLeftWheel);
  ...
  <strong>CATIPLMNavOccurrence_var spPLMNavOccOnRearLeftWheelByAPI;</strong>
  hr = <strong>occMngt-&gt;GetOccurrence(spPLMNavOccurrenceOnRoot, pListOfInstForRearLeftWheel, spPLMNavOccOnRearLeftWheelByAPI);</strong>
...</pre>
<p>We retrieve the rear left wheel occurrence using the <code>CATIPrdOccurrenceMngt::GetOccurrence</code> 
API.</p>
<p>The <code>CATIPrdOccurrenceMngt::GetOccurrence</code> API takes three arguments:</p>
<ul>
	<li><code>spPLMNavOccurrenceOnRoot</code>, a <em>CATIPLMNavOccurrence_var</em> type, it is 
		a pointer to the Skate root occurrence.</li>
	<li><code>pListOfInstForRearLeftWheel</code>, a CATListPtrCATIPLMNavInstance type, list containing 
		path of instances for the Rear left wheel occurrence . We prepare this list 
		using the pointers that were used while creating Skate product structure 
		earlier.</li>
	<li><code>spPLMNavOccOnRearLeftWheelByAPI</code>, a <em>CATIPLMNavOccurrence_var</em> type, 
		an output pointer which contains the retrieved occurrence.</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h4><a name="ComputeOccByNav"></a>Retrieving the Occurrence from the Computed Occurrence 
Model</h4>
<p>In this section ,we retrieve the Rear left wheel occurrence(marked in Yellow 
in [<a href="#Fig2">Fig2</a>] above from the computed occurrence model.</p>
<pre class="code">...
  CATIPLMNavOccurrence_var <strong>spPLMNavOccOnRearLeftWheelByNav</strong>  ;
  CATListPtrCATIPLMNavOccurrence ListAxleOccurrences ;
  CATListPtrCATIPLMNavOccurrence ListWheelOccurrences ;

  hr = spPLMNavOccurrenceOnRoot-&gt;<strong>ListChildren</strong>(ListAxleOccurrences);
  if ( SUCCEEDED(hr) &amp;&amp; <strong>(ListAxleOccurrences.Size() ==2)</strong> )
  {
    CATIPLMNavOccurrence_var spRearAxleOccurrence = <strong>ListAxleOccurrences[2];</strong>
    hr = spRearAxleOccurrence-&gt;<strong>ListChildren</strong>(ListWheelOccurrences);
    if ( SUCCEEDED(hr) &amp;&amp; <strong>(ListWheelOccurrences.Size()==2)</strong> )
    {
      <strong>spPLMNavOccOnRearLeftWheelByNav = ListWheelOccurrences[1];</strong>
    } 
  } 
...</pre>
<p>As shown in the code above ,we navigate the Skate occurrence model by listing 
the various child occurrences using the <code>CATIPLMNavOccurrence::ListChildren</code> 
API and then retrieve the required Rear left wheel occurrence from the occurrence 
model. Please note the index of the array used in the code above, to retrieve the 
Rear left wheel occurrence, is done as per the order of creation in the Skate Model. 
(See <a href="#ProductCreation">Creating the Skate Product Structure</a> to know the order of creation.)</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h4><a name="CheckOcc"></a>Checking It Is the Same Occurrence (Using IsEqual)</h4>
<p>In this section ,we check the Rear left wheel occurrence by comparing the two 
occurrences( retrieved in the earlier sections) using the method <strong>IsEqual.</strong></p>
<pre class="code">...
  <strong>if(spPLMNavOccOnRearLeftWheelByNav-&gt;IsEqual(spPLMNavOccOnRearLeftWheelByAPI)==FALSE)</strong>
    return 1;
...</pre>
<p>As shown in the code above, we compare the two occurrences retrieved in the sections 
<a href="#ComputeByApi">Computing the Occurrence</a> and <a href="#ComputeOccByNav">Retrieving the Occurrence from the Computed Occurrence 
Model</a> earlier and 
check whether both are same or not. The check is OK , if both are same else not.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="ValidatePath"></a>Computing the Path of Instances of the Rear Left 
Wheel Occurrence</h3>
<p>Once the Rear left wheel occurrence is computed, we now compute its path of instances. 
For this, we first retrieve the path of instances from the Rear left wheel occurrence 
using the <code>CATIPrdOccurrenceMngt::FromOccurrenceToPathOfInstances</code> API.
</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h4><a name="RetrievePath"></a>Retrieving the Path of Instances of the Rear Left 
Wheel Occurrence</h4>
<pre class="code">...
  CATListPtrCATIPLMNavInstance <strong>pListOfInstForRearLeftWheelOcc;</strong>
  hr= <strong>occMngt-&gt;FromOccurrenceToPathOfInstances(spPLMNavOccOnRearLeftWheelByNav,pListOfInstForRearLeftWheelOcc);</strong>
...</pre>
<p>As depicted in the code abstract above, the <code>CATIPrdOccurrenceMngt::FromOccurrenceToPathOfInstances</code> 
API is used to retrieve the path of instances from the occurrence.</p>
<p>The <code>CATIPrdOccurrenceMngt::FromOccurrenceToPathOfInstances</code> API takes 
two arguments:</p>
<ul>
	<li><strong>spPLMNavOccOnRearLeftWheelByNav</strong>, a <em>CATIPLMNavOccurrence_var</em> 
		type, it is the pointer to the rear left wheel occurrence whose path of 
		instances is to be retrieved.</li>
	<li><strong>pListOfInstForRearLeftWheelOcc</strong>, a CATListPtrCATIPLMNavInstance 
		type, it is the output pointer which contains the list of instances for 
		the input rear left wheel occurrence.</li>
</ul>
<p>The path of instances retrieved in this step are then checked in the next step, 
just to ensure that we have retrieved the correct path for Rear left wheel occurrence.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h4><a name="CheckPath"></a>Checking the Path of Instances</h4>
<p>The path of instances of the Rear left wheel occurrence retrieved in the previous 
step [<a href="#RetrievePath">#</a>] are checked in this step.</p>
<pre class="code">...
 if<strong>(2 == pListOfInstForRearLeftWheelOcc.Size()</strong>)
 {
    CATIPLMNavInstance *<strong>pNavOccOnRearAxle = pListOfInstForRearLeftWheelOcc[1];</strong>
    CATIPLMNavInstance *<strong>pNavOccOnLeftWheel= pListOfInstForRearLeftWheelOcc[2];</strong>

    if((NULL!=pNavOccOnRearAxle) &amp;&amp; (NULL!=pNavOccOnLeftWheel))
    {
      <strong>if( (pNavOccOnRearAxle-&gt;IsEqual(pNavInstOnRearAxle)==TRUE) &amp;&amp;
          (pNavOccOnLeftWheel-&gt;IsEqual(pNavInstOnLeftWheel)==TRUE) )</strong>
	    ...
	    else return 1;
	}
     }
...</pre>
<p>As depicted in the code above, we validate the retrieved path of instances (in 
the previous step) by comparing them with the ones that we used while creating the 
Skate product structure. (See <a href="#InstCreation">Creating and Adding Product Instances</a>.) We use the method
<strong>IsEqual</strong> for their equality check. The use case fails if this check 
is not OK.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>This use case illustrates the end-user how to work with Occurrences using the
<em>CATIPrdOccurrenceMngt</em> API's.</p>
<p>The objective of this use case is to:</p>
<ul>
	<li>Create the Product Occurrence model, using <code>CATIPrdOccurrenceMngt::GetOrCreateRootOccurrence</code> 
		API.</li>
	<li>Compute an Occurrence , given its path of instances, using <code>CATIPrdOccurrenceMngt::GetOccurrence</code> 
		API.</li>
	<li>Retrieve a Path for an Occurrence, using <code>CATIPrdOccurrenceMngt::FromOccurrenceToPathOfInstances</code> 
		API.</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>Referencess</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Oct 2009]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
