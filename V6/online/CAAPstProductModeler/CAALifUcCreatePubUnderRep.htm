<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Creating Publications under a Representation Reference</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Creating Publication under a Representation Reference</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2>Abstract</h2>
		<p>This Use Case (UC) illustrates the creation of a Port (Publication) under 
		a Representation Reference (Rep Ref) and its significance. A Port in a product 
		context exposing a feature through a Port on Port remains unimpacted (synchronized), 
		without a need of an explicit update, on modification of the pointed feature.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAALifCreatePubUnderRep Use Case</a>
				<ul>
					<li><a href="#What">What Does CAALifCreatePubUnderRep Do</a></li>
					<li><a href="#How">How to Launch CAALifCreatePubUnderRep</a></li>
					<li><a href="#Where">Where to Find the CAALifCreatePubUnderRep 
						Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#References">References</a> </li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>The UC teaches an end-user</p>
<ul>
	<li>Steps involved to create a Port under a Rep Ref, exposing a feature contained 
		in the authoring stream of the Rep Ref.</li>
	<li>Significance of exposing a feature in a product context, using a Port on 
		Port on Rep Ref.</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="UseCase"></a>The CAALifCreatePubUnderRep Use Case</h2>
<p>CAALifCreatePubUnderRep is a use case of the CAALiteralFeatures.edu framework 
that illustrates <strong>KnowledgeInterfaces</strong>, <strong>OMB</strong> and
<strong>ProductStructureInterfaces</strong> framework capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAALifCreatePubUnderRep Do</h3>
<p>The UC executes on an input model as depicted below. It consist of a Root Product 
Reference <strong>CAALifCreatePubUnderRep_Root---</strong> which aggregates</p>
<ul>
	<li>A Representation Instance (instance of <strong>RepRef_WithPort---</strong>) 
		which in turn aggregates
		<ul>
			<li>A Knowledge Parameter of type Length namely.
				<strong>Length.1</strong></li>
		</ul>
	</li>
</ul>
<table>
	<caption><a name="Fig1"></a>Fig. 1 Input Model</caption>
	<tr>
		<td>
		<img alt="Input Model" height="169" src="images/CAALifUCCreatPubUnderRep_Fig1.jpg" width="266"/></td>
	</tr>
</table>
<p>The UC loads the Root Reference in session. It then navigates down the product 
hierarchy and retrieves the Rep Inst under it. It further retrieves the Rep Ref 
associated with this Rep Inst.</p>
<p>It next creates a Port namely. <strong>Port_On_KnowParameter</strong>, which 
exposes the Knowledge Parameter <strong>Length.1</strong> under the Rep Ref.</p>
<p>It then creates a Port namely. <strong>Port_Under_RootRef_Publishing_KnowParameter</strong> 
under the Root Ref, which directly exposes the Knowledge Parameter Length.1</p>
<p>It finally creates a Port namely. <strong>Port_Under_RootRef_Publishing_PortExposingKnowParameter</strong>, 
which exposes the Port under the Rep Ref. In other words this Port effectively exposes 
the Knowledge Parameter Length.1.</p>
<p>The model output by the UC execution is depicted as shown below.</p>
<table>
	<caption><a name="Fig2"></a>Fig. 2 Output Model</caption>
	<tr>
		<td>
		<img alt="Output Model" height="246" src="images/CAALifUCCreatPubUnderRep_Fig2.jpg" width="362"/></td>
	</tr>
</table>
<p>The steps that follow are interactive. We open the model output by the UC execution 
above in V6. We modify the Knowledge Parameter Length.1 value to 20mm. (It was initially 
0mm).</p>
<p>On modification you'll notice the ports namely. <strong>Port_On_KnowParameter</strong> 
and <strong>Port_Under_RootRef_Publishing_KnowParameter</strong> are both rendered 
asynchronous. You'll notice the nodes for these Ports in the spec tree are depicted 
with a red circle, which indicates an &quot;<strong>Update required</strong>&quot; 
status.</p>
<table>
	<caption>Fig. 3 Model with Know Param Modified</caption>
	<tr>
		<td>
		<img alt="Model with Know Param Modified" height="248" src="images/CAALifUCCreatPubUnderRep_Fig3.jpg" width="371"/></td>
	</tr>
</table>
<p>Finally on Update the two Ports will be synchronized. </p>
<p>A significant point to notice here is that on modification of the target (Knowledge 
Parameter <strong>Length.1</strong> value) the Ports directly exposing it, are rendered 
asynchronous and require an update. While, a Port exposing the parameter through 
another Port, remains synchronized (no need of an update).</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAALifCreatePubUnderRep</h3>
<p>To launch CAALifCreatePubUnderRep, you will need to set up the build time environment, 
then compile CAALifCreatePubUnderRep along with its prerequisites, set up the run 
time environment, and then execute the use case [<a href="#References">1</a>].</p>
<p>Next execute the command as depicted below:</p>
<pre class="code">mkrun -c &quot;CAALifCreatePublicationForRep <em>repository server_name:port_number user password role environment modeler PLM_Type PLM_ExternalID_Value V_version_value</em>&quot;</pre>
<p>Where:</p>
<table class="fill">
	<tr>
		<th>Repository</th>
		<td>
		<script type="text/javascript">insertRepository();</script>
		</td>
	</tr>
	<tr>
		<th>Server</th>
		<td>The server as ServerName:ServerPort/rootURI</td>
	</tr>
	<tr>
		<th>User</th>
		<td>The user name</td>
	</tr>
	<tr>
		<th>Password</th>
		<td>The user password to authenticate the user</td>
	</tr>
	<tr>
		<th>SecurityCtx</th>
		<td>a string representing the security context (Role. Organization. Project).
Choose Role as Reviewer (as the use case does not modify the PLM Data)</td>
	</tr>
	<tr>
		<th>Environment</th>
		<td>A PLM environment containing PLMProductDS (a PRODUCT's custo)</td>
	</tr>
	<tr>
		<th>Modeler</th>
		<td>The Modeler</td>
	</tr>
	<tr>
		<th>PLM_Type</th>
		<td>The PLM Type of Root Reference to be loaded</td>
	</tr>
	<tr>
		<th>PLM_ExternalID_Value</th>
		<td>The PLM_ExternalID value of the Root Reference <a href="#Model">*</a></td>
	</tr>
	<tr>
		<th>V_version_Value </th>
		<td>The V_version value of the Root Reference</td>
	</tr>
</table>
<p><strong><a name="Model"></a>*</strong> The input model is retrieved by importing the
CAALifCreatePubUnderRep_Root.3dxml file from the <a>
<code>CAALiteralFeatures.edu</code></a> framework.</p>
<p><code>InstallRootFolder\CAADoc\CAALiteralFeatures.edu\InputData\CAALifCreatePubUnderRep_Root.3dxml</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<p>This 3D XML file contains the root Product Reference with 
the following attributes:</p>
<ul>
	<li><code><strong>PLM_ExternalID</strong></code>: CAALifCreatePubUnderRep_Root</li>
	<li><code><strong>Version</strong></code>: ---</li>
</ul>
<p><strong>Attention</strong>: Please refer to the document [<a href="#References">1</a>] 
for how to import and reimport such a 3D XML file in your PLM repository.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAALifCreatePubUnderRep Code</h3>
<p>The CAALifCreatePubUnderRep use case is made of the <strong>CAALifCreatePublicationForRepMain.cpp</strong> 
file located at the path specified below</p>
<p><code>InstallRootDirectory\CAADoc\CAALiteralFeatures.edu\CAALifCreatePublicationForRep.m\</code></p>
<p>where <code>InstallRootDirectory</code> [<a href="#References">1</a>] is the 
directory where the CAA CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>CAALifCreatePubUnderRep is made up of three steps:</p>
<ol>
	<li><a href="#Prolog">Prolog</a></li>
	<li><a href="#CreatePort-1">Create a Port under the Rep Ref exposing the Knowledge 
		Parameter</a></li>
	<li><a href="#Epilog">Epilog</a></li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Prolog"></a>Prolog</h3>
<p>The initial steps consist of creating a V6 session [<a href="#References">2</a>]. 
Next, we query the PLM Component from the underlying db with the PLM_ExternalID 
and V_version attribute values input to the UC. The component is then loaded in 
session. [<a href="#References">3</a>]</p>
<p>The next step is to navigate down the Product hierarchy, to retrieve the Rep 
Inst and associated Rep Ref, aggregated by the Root Reference. [<a href="#References">4</a>]</p>
<p>Next, the UC retrieves the Knowledge Parameter namely. Length.1 inside the authoring 
stream of the Rep Ref [<a href="#References">5</a>].</p>
<p>It then proceeds to create the Ports inside the model. There is a Port created 
under the Rep Ref which exposes the Knowledge Parameter Length.1. The steps involved 
for this are detailed in the step that follows. </p>
<p>It further creates two Ports under the Root Reference. One of them exposes the 
Knowledge Parameter directly. The other exposes the Port under the Rep Inst, and 
thus indirectly exposes the Knowledge Parameter. [<a href="#References">6</a>]</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="CreatePort-1"></a>Create a Port Under the Rep Ref exposing the Knowledge 
Parameter</h3>
<p>This step involves the creation of a Port under the Rep Ref exposing a Knowledge 
Parameter (Length.1) contained in the authoring stream of the Rep Ref.</p>
<pre class="code"><strong>CATIPrdPublications* piPublicationsOnRepRef = NULL</strong>;
hr = <strong>piPsiRepLoadModeOnRepRef-&gt;QueryInterface</strong>(<strong>IID_CATIPrdPublications</strong>,(void**)&amp;piPublicationsOnRepRef);
if (FAILED(hr)) return 1;

CATOmbObjectInContext * oObjectInContext_ForKnowPara =NULL;
CATBaseUnknown* pCBUOnKnowParam = NULL;
hr = <strong>spCkeParam-&gt;QueryInterface</strong>(<strong>IID_CATBaseUnknown</strong>,(void**)&amp;pCBUOnKnowParam);
if (FAILED(hr)) return 1;

<strong>CATLISTP(CATIPLMComponent) MyEmptyList</strong>;
hr = <strong>CATOmbObjectInContext::CreateObjectInContext</strong>(MyEmptyList,NULL,pCBUOnKnowParam,
                                                  oObjectInContext_ForKnowPara);
if ((FAILED(hr)) || (NULL==oObjectInContext_ForKnowPara)) return 1;
    
CATIAdpEnvironment * pEnv = NULL ;
hr = <strong>CATAdpDictionaryServices::GetEnvironment</strong>(repository,EnvToUse,&amp;pEnv);
if ( FAILED(hr) || ( NULL == pEnv)  ) return 1;

CATListValCATICkeParm_var ListAttrWithName;
<strong>CATICkeParmFactory_var spCkeParmFactory  =  CATCkeGlobalFunctions::GetVolatileFactory()</strong>; 
if ( NULL_var != spCkeParmFactory )
{
     <strong>CATICkeParm_var spParm</strong>; 
     CATUnicodeString PortName_PointedOnKnowParam = "Port_On_KnowParameter";
     <strong>spParm =</strong> <strong>spCkeParmFactory-&gt;CreateString</strong>("V_FunctionalName", PortName_PointedOnKnowParam );  
     <strong>ListAttrWithName.Append</strong>(spParm);
}

<strong>CATIPrdPublication_var oIPublication</strong>;
hr = <strong>piPublicationsOnRepRef-&gt;AddPrdPublication</strong>(pEnv,ListAttrWithName,oObjectInContext_ForKnowPara,oIPublication);
</pre>
<p>We retrieve the <em>CATIPrdPublications*</em> type on the Rep Ref. (<code>piPublicationsOnRepRef</code>). 
The <code>AddPrdPublication</code>() of the <em>CATIPrdPublications</em> class creates 
a Publication aggregated under the Rep Ref. The inputs to the API are</p>
<ul>
	<li><code>pEnv</code>, a <em>CATIAdpEnvironment</em>* type, which contains the 
		environment retrieved with the static call <code>GetEnvironment</code>() 
		of the <em>CATAdpDictionaryServices</em> class</li>
	<li><code>ListAttrWithName</code>, a <em>CATListValCATICkeParm_var</em> type, 
		which contains a list of attribute name-value sets which characterize the 
		Publication to be created. The <code>CreateString</code>() call of the
		<em>CATICkeParamFactory</em> class returns a String parameter (a <em>CATICkeParm_var</em> 
		type), whose parameter name is &quot;<code>V_FunctionalName</code>&quot; 
		with a parameter value assigned to it. The static <code>GetVolatileFactory</code>() 
		call of the <em>CATCkeGlobalFunctions</em> class returns the factory, a
		<em>CATICkeParmFactory</em> type</li>
	<li><code>oObjectInContext_ForKnowPara</code>, a <em>CATOmbObjectInContext</em>* 
		type, which represents the Object In Context. The static call <code>CreateObjectInContext</code>() 
		of the <em>CATOmbObjectInContext</em> class creates an Object In Context. 
		Its inputs are:<ul>
			<li><code>MyEmptyList</code>, a <em>CATLISTP(CATIPLMComponent)</em> 
				type. Since our Port is directly under the Rep Ref pointing to a 
				feature contained inside its authoring stream, it does not require 
				a context. In other words, the path of instances is an empty list</li>
			<li>NULL, which implies the contextual path does not 
				have a Rep Inst inside it</li>
			<li><code>pCBUOnKnowParam</code>, a <em>CATBaseUnknown</em>* 
				type, representing the Knowledge Parameter (target of Port)</li>
			<li><code>oObjectInContext_ForKnowPara</code>, the
				<em>CATOmbObjectInContext</em>* type, which represents the Object 
				In Context output</li>
		</ul>
	</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Epilog"></a>Epilog</h3>
<p>The <code>CAALifCreatePubUnderRep</code> use case ends by simply closing the 
PLM session. Since all Product Structure use cases necessarily conclude by 
closing the PLM session, we have a dedicated article on this topic namely. &quot;Connecting to V6 Server&quot; [<a href="#References">2</a>].</p>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertLinkToTop();</script>
<h2><a name="References"></a>References</h2>
<table>
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td>
		<a href="../CAAPlmServerAccess/CAAAdpUcBasicBatch.htm">
		Connecting to V6 Server</a></td>
	</tr>
	<tr>
		<td>[3]</td>
		<td>
		<a href="../CAAPlmServerAccess/CAAAdpUcQueryPLMComponent.htm">
		Querying PLM Object by Attributes</a></td>
	</tr>
	<tr>
		<td>[4]</td>
		<td><a href="CAAPstUcBrowsingProductModel.htm">Browsing a Product Model</a></td>
	</tr>
	<tr>
		<td>[5]</td>
		<td><a href="CAAPstUcCreatePublication_CreateTarget.htm">Creating Publication's 
		Target</a></td>
	</tr>
	<tr>
		<td>[6]</td>
		<td><a href="CAAPstUcCreatePublication_CreatePublication.htm">Creating Publications</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table>
	<tr>
		<td>Version: <strong>1</strong> [Mar 2011]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
