<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=iso-8859-1" http-equiv="Content-Type" />
<link href="../CAADocStyleSheets/caav5.css" rel="stylesheet" type="text/css"/>
<script src="../CAADocJavaScript/DSDocTocToc.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/DSDocHighlight.js" type="text/javascript">/* */</script>
<script src="../CAADocJavaScript/submit.js" type="text/javascript">/* */</script>
<title>Replacing Product Instance</title>
</head>

<body onload="highlightSearchTerms();">

<table class="DocHeader">
	<tr>
		<td class="DocHeader1">
		<h1><a name="Top"></a>Replacing Product Instance</h1>
		</td>
	</tr>
	<tr>
		<td class="use">Use Case</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<table class="abstract">
	<tr>
		<td>
		<h2><a name="Top"></a>Abstract</h2>
		<p>This article discusses the CAAPstReplaceInstance use case. It illustrates 
		the steps involved in replacing an Instance of a Reference with an Instance 
		of another Reference. We have an option of either replacing only a specified 
		Child Instance or all the loaded Instances of its Reference.</p>
		<ul>
			<li><a href="#Learn">What You Will Learn With This Use Case</a></li>
			<li><a href="#UseCase">The CAAPstReplaceInstance Use Case</a>
				<ul>
					<li><a href="#What">What Does the CAAPstReplaceInstance Do</a></li>
					<li><a href="#How">How to Launch CAAPstReplaceInstance</a></li>
					<li><a href="#Where">Where to Find the CAAPstReplaceInstance 
						Code</a></li>
				</ul>
			</li>
			<li><a href="#Step">Step-by-Step</a></li>
			<li><a href="#InShort">In Short</a></li>
			<li><a href="#History">References</a></li>
		</ul>
		</td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Learn"></a>What You Will Learn With This Use Case</h2>
<p>One learns to:</p>
<ul>
	<li>Replace an Instance of a Child Reference directly under Root, with an Instance 
		of an another Reference.</li>
	<li>Replace all loaded Child Instances of a given Reference with an Instance 
		of another Reference.</li>
</ul>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="UseCase"></a>The CAAPstReplaceInstance Use Case</h3>
<p>CAAPstReplaceInstance is a use case of the CAAProductStructure.edu framework 
that illustrates the ProductStructureInterfaces framework capabilities.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="What"></a>What Does CAAPstReplaceInstance Do</h3>
<p>The use case begins by loading the Product Model [<a href="#Fig1">Fig. 1</a>] 
in the <strong>Navigation Mode</strong>. Its a mode in which only the Product References 
and Instances are loaded in session.</p>
<table>
	<caption><a name="Fig1"></a>Fig. 1: Input Product Model</caption>
	<tr>
		<td>
		<img alt="Input Product Model" height="369" src="images/CAAPstReplaceInstance_Fig1.jpg" width="440"/></td>
	</tr>
</table>
<p>The input model seen in [<a href="#Fig1">Fig. 1</a>] has the Root Reference namely 
CAAPstReplaceInstance_Root aggregating:</p>
<ul>
	<li>An instance of CAAPstReplaceInstance_Child1--- namely. CAAPstReplaceInstance_Child1---.1.</li>
	<li>An instance of CAAPstReplaceInstance_Child2--- namely. CAAPstReplaceInstance_Child2---.1.</li>
</ul>
<p>Product Reference CAAPstReplaceInstance_Child2--- aggregates an instance of CAAPstReplaceInstance_Child1--- 
namely. CAAPstReplaceInstance_Child1---.1</p>
<p>The Use Case replaces an instance of CAAPstReplaceInstance_Child1--- in the input 
model with an Instance of its Newer Version namely. CAAPstReplaceInstance_Child1--A.</p>
<p>Either the single input Child Instance, that found directly under Root is replaced 
[<a href="#Fig2">Fig. 2</a>] or all Instances of its Reference (two) are replaced 
by an Instance of a Newer Version of its Reference [<a href="#Fig3">Fig. 3</a>] 
It is important to note that the Child Instances which are replaced are those which 
are necessarily loaded in the session.</p>
<table>
	<caption><a name="Fig2"></a>Fig.2: The Output Model with a Single Loaded Child 
	Instance Replaced</caption>
	<tr>
		<td>
		<img alt="Output Model" height="381" src="images/CAAPstReplaceInstance_Fig2.jpg" width="483"/></td>
	</tr>
</table>
<table>
	<caption><a name="Fig3"></a>Fig. 3: The Output Model with All Loaded Child Instances 
	Replaced by an Instance of a Newer Version of the Same Reference</caption>
	<tr>
		<td>
		<img alt="Output Model" height="381" src="images/CAAPstReplaceInstance_Fig3.jpg" width="508"/></td>
	</tr>
</table>
<p>Here we have created a Newer Version of the Child Reference, an instance of which 
replaces the existing Child Instance. But the replacement could be an instance of 
any other Product Reference as well, as the figure below [<a href="#Fig4">Fig. 4</a>] 
indicates.</p>
<table>
	<caption><a name="Fig4"></a>Fig. 4: The Output Model with All Loaded Child Instances 
	Replaced by an Instance of Another Reference</caption>
	<tr>
		<td>
		<img alt="Output Model" height="354" src="images/CAAPstReplaceInstance_Fig4.jpg" width="556"/></td>
	</tr>
</table>
<p>We wish to re-emphasize here that the Child Instances which are replaced are 
those which are loaded in the session. Thus only those instances of CAAPstReplaceInstance_Child1--- 
which are aggregated under CAAPstReplaceInstance_Root--- are replaced, since this 
Root is loaded in session.</p>
<p>The replacements would not occur for instances of CAAPstReplaceInstance_Child1--- 
under another Root CAAPstReplaceInstance_RootA---, which is not loaded in the session.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="How"></a>How to Launch CAAPstReplaceInstance</h3>
<p>To launch CAAPstReplaceInstance, you will need to set up the build time environment, 
then compile CAAPstReplaceInstance along with its prerequisites, set up the run 
time environment, and then execute the use case [<a href="#References">1</a>].</p>
<p>To launch the use case execute the command:</p>
<p><code>mkrun -c &quot;CAAPstReplaceInstance Repository Server User Password SecurityCtx 
PLM_ExternalID_Root Version_Root ONE/ALL PLMType&quot;</code></p>
<p>where:</p>
<table class="fill">
	<tr>
		<th>Repository</th>
		<td>
		<script type="text/javascript">insertRepository();</script>
		</td>
	</tr>
	<tr>
		<th>Server</th>
		<td>The server as ServerName:ServerPort/rootURI</td>
	</tr>
	<tr>
		<th>User</th>
		<td>The user name</td>
	</tr>
	<tr>
		<th>Password</th>
		<td>The user password to authenticate the user</td>
	</tr>
	<tr>
		<th>SecurityCtx</th>
		<td>A string representing the security context (Role.Organization.Project). 
		Choose Role as Designer</td>
	</tr>
	<tr>
		<th>PLM_ExternalID1</th>
		<td>The PLM_ExternalID of a PLM Reference or PLM Representation Reference 
		to be opened</td>
	</tr>
	<tr>
		<th>V_version1</th>
		<td>The V_version of a PLM Reference or PLM Representation Reference to 
		be opened </td>
	</tr>
	<tr>
		<th rowspan="2">ONE/ALL</th>
		<td><strong>ONE</strong> --&gt; Only the input Child Instance is replaced 
		by an Instance of another Reference</td>
	</tr>
	<tr>
		<td><strong>ALL</strong> --&gt; All Instances of the Child Reference are 
		replaced by an Instance of another Reference</td>
	</tr>
	<tr>
		<th>PLMType</th>
		<td>A String Representing PLM Type</td>
	</tr>
</table>
<p>* The input model is retrieved by importing the <a>CAAPstReplaceInstance.</a>3dxml 
file from the <a>CAAProductStructure.edu</a> fwk.</p>
<p><code>InstallRootFolder\CAADoc\CAAProductStructure.edu\InputData\CAAPstReplaceInstance.3dxml</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<p>This 3D XML file contains the Root Product Reference with the following attributes:</p>
<ul>
	<li>PLM_ExternalID: CAAPstReplaceInstance_Root</li>
	<li>Version: ---</li>
</ul>
<p>We recommend that the input model be necessarily imported from the 3dxml file 
we have provided here, since the Use Case execution essentially depends on the provided 
model.</p>
<p>Also please ensure that all the Child References instantiated beneath the Root 
Reference are Versionable. By Versionable, we imply that, the version of the Child 
Reference should be its last version and its Maturity State should allow a VersionUp.</p>
<p><strong>Attention</strong>: Please refer to the document [<a href="#References">1</a>] 
for how to import and reimport such a 3D XML file in your PLM repository.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Where"></a>Where to Find the CAAPstReplaceInstance Code</h3>
<p>The CAAPstReplaceInstance use case is located in the CAAPstReplaceInstance.m 
module of the CAAProductStructure.edu framework:</p>
<p><code>InstallRootFolder\CAADoc\CAAProductStructure.edu\CAAPstReplaceInstance.m</code></p>
<p>where <code>InstallRootFolder</code> [<a href="#References">1</a>] is the folder 
where the API CD-ROM is installed.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="Step"></a>Step-by-Step</h2>
<p>Following are the main steps in CAAPstReplaceInstance:</p>
<ol>
	<li><a href="#Prolog">Prolog</a></li>
	<li><a href="#Step1">Loading the Input PLM Component</a></li>
	<li><a href="#Step2">Gaining the Control over the Life Cycle of the Input PLM 
		Component</a></li>
	<li><a href="#Step3">Retrieving the Child Reference and Its Identificator</a></li>
	<li><a href="#Step4">Unloading Input PLM Component from the Session</a></li>
	<li><a href="#Step5">Creating a New Version of the Child Reference</a></li>
	<li><a href="#Step6">Reloading the Input PLM Component and Retrieving Child 
		Instance beneath It</a></li>
	<li><a href="#Step7">Loading the New Version of the Child Reference in the Session</a></li>
	<li><a href="#Step8">Replacing Child Instance with an Instance of the New Version 
		of the Child Reference</a></li>
	<li><a href="#Epilog">Epilog</a></li>
</ol>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Prolog"></a>Prolog</h3>
<p>The CAAPstReplaceInstance use case begins by creating a session and connecting 
to the Input Repository. This, being the most fundamental prerequisite for all batch 
use cases, it is the first step in their execution.</p>
<p>In this case, we create a session and connect to Repository with the Designer 
Role (since we are modifying the PLM data). There are other parameters as well, 
details of which can be found in the &quot;Connecting to V6 Server&quot; use case 
article [<a href="#References">2</a>]. This article primarily deals with Opening 
and Closing a PLM session.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step1"></a>Loading the Input PLM Component</h3>
<p>We load the Input Component in session.</p>
<pre class="code">...
  CATIPLMNavReference* poInputComp= NULL;
  CATOmbLifeCycleRootsBag Bag;
  CATAdpOpenParameters params(CATAdpExpandParameters::Navigation);
  CATAdpOpener AdpOpener(Bag,params);
  hr= AdpOpener.CompleteAndOpen(opiIDComp,IID_CATIPLMNavReference, (void**) &amp;poInputComp);
...</pre>
<p>The &quot;Query, Expanding and Opening PLM Object&quot; Use Case [<a href="#References">3</a>] 
explains the APIs which loads various PLM Components in session in a mode based 
on our choice. We retrieve the <em>CATIPLMNavReference</em> Interface pointer (poInputComp) 
on the input model, loaded in the session, in Navigation mode. In this mode only 
the Product References and the Instances beneath them are loaded in session.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step2"></a>Gaining the Control over the Life Cycle of the Input PLM 
Component</h3>
<p>In the steps ahead, we version a Child Reference whose Instance exists beneath 
Root. Since Versioning is possible only for Components not loaded in the session, 
we deploy a BAG for unloading the Input Component from the Session.</p>
<pre class="code">  ...
  CATOmbLifeCycleRootsBag Bag;
  hr = <strong>Bag.InsertRoot</strong>(poInputComp);
  ...</pre>
<p>Its interesting to note that we have inserted the Root Component in the BAG, 
the Child Reference also follows, since one of its instance is aggregated by the 
Root. The Root thus is a direct inclusion in BAG while the Child Reference is an 
indirect inclusion in it. If you are interested in learning more about BAG the article 
[<a href="#References">5</a>] can guide you further on this subject.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step3"></a>Retrieving the Child Reference and Its Identificator</h3>
<p>We navigate through the Product Model for the Child Reference and retrieve its 
Identificator. The Identificator identifies a PLM Component in the database and 
is an input for the Versioning operation we do in the steps ahead. The article &quot;Understanding 
a PLM Component Identificator&quot; [<a href="#References">4</a>] details the concept 
of a PLM Identificator.</p>
<pre class="code">...
  <strong>CATListPtrCATIPLMNavEntity</strong> childrenList;
  <strong>CATPLMCoreType</strong> coreType = <strong>PLMCoreInstance</strong>;

  hr = poInputComp-&gt;<strong>ListChildren</strong>(childrenList,1,&amp;coreType);

  CATIPLMNavEntity* piNavEnt = NULL;
  piNavEnt = childrenList[1];

  CATIPLMComponent* poChildRef = NULL
  CATIPLMNavInstance* piNavInst = NULL;
  hr = piNavEnt-&gt;QueryInterface(IID_<strong>CATIPLMNavInstance</strong>,(void **)&amp;piNavInst);	
  {
    CATIPLMNavReference* poNavRefChild = NULL;
    hr = piNavInst-&gt;<strong>GetReferenceInstanceOf</strong>(poNavRefChild);

    hr = poNavRefChild-&gt;QueryInterface(IID_<strong>CATIPLMComponent</strong>,(void**)&amp;poChildRef);
  }
  CATIAdpPLMIdentificator* oAdpID_ChildRef = NULL;
  hr = poChildRef-&gt;<strong>GetAdpID</strong>(oAdpID_ChildRef);
  ...
}</pre>
<p>The Product Model Navigation APIs enable us to retrieve the Child Reference, 
beginning with Root. The CATIPLMComponent::GetAdpID implementation on the Child 
Reference then returns the Component Identificator, which uniquely identifies the 
Child Reference in the database.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step4"></a>Unloading Input PLM Component from the Session</h3>
<p>We unload the Root component from the session by simply removing it from the 
BAG, we created earlier for handling it. This is a pre-requisite for the step ahead 
where we create a new version of the Child Reference.</p>
<pre class="code">...
  hr = <strong>Bag.RemoveAll()</strong>;
...</pre>
<p>Though we have removed the Root component from the BAG, the Child Reference also 
follows, owing to its aggregation under Root. This is an example of the lifecycle 
propagation through an aggregating link which exists between entities within a product 
hierarchy.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step5"></a>Creating a New Version of the Child Reference</h3>
<p>We create a new version of the Child Reference. We will replace an existing Child 
Instance with an instance of this new version.</p>
<pre class="code">  CATTime TimeVersion;
  int Year = TimeVersion.GetYear();
  int Month = TimeVersion.GetMonth();
  int Day = TimeVersion.GetDay();
  if (31==Day) Day = 0;
  TimeVersion.SetDate(Year,Month,Day+1);

  CATIAdpPLMIdentificator* oAdpID_NewVersionOfChildRef = NULL;
  hr = <strong>CATAdpVersioningServices::NewVersion</strong>(oAdpID_ChildRef,
                                    TimeVersion,
                                    oAdpID_NewVersionOfChildRef);
...</pre>
<p>The new version of the Child Reference is returned in the form of its Identificator 
in the database. The article &quot;Understanding PLM Versioning&quot; [<a href="#References">6</a>] 
explains the principles of Versioning PLM Components.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step6"></a>Reloading the Input PLM Component and Retrieving Child Instance 
beneath It</h3>
<p>We reload the input Component in session, which was earlier unloaded since we 
had to create a new version of its Child Reference. Its loaded in Navigation mode 
and a <em>CATIPLMProducts</em> Interface pointer to it is sought. (poInputCmp). 
This invokes the ReplaceInstance API, in the step ahead.</p>
<p>We then seek the first Child Instance beneath Root, as a <em>CATIPLMProducts</em> 
Interface pointer (poOldChildInst), an input for the ReplaceInstance API call ahead.</p>
<p>The earlier steps namely. &quot;<a href="#Step1">Loading the Input PLM Component</a>&quot; 
and &quot;<a href="#Step3">Retrieving the Child Reference and Its Identificator</a>&quot; 
guide you further with the steps involved in the current step.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step7"></a>Loading the New Version of the Child Reference in the Session</h3>
<p>We load the new version of the Child Reference in session.</p>
<pre class="code">CATIPLMProducts* poPLMCompOnNewChildRef  = NULL;
CATIPLMProducts* poPLMProductOnNewChildInst = NULL;
<strong>CATAdpOpenParameters params(CATAdpExpandParameters::Navigation)</strong>;
<strong>CATAdpOpener AdpOpener(Bag,params)</strong>;
hr = <strong>AdpOpener.CompleteAndOpen</strong>(poAdpID_NewVersionOfChildRef,IID_CATIPLMProducts,(void**)&amp;poPLMCompOnNewChildRef);</pre>
<p>The identificator of the new version of the Child Reference was retrieved earlier. 
We load this new Reference in session yet again in Navigation mode and retrieve 
the <em>CATIPLMProducts</em> Interface pointer (poPLMCompOnNewChildRef) on it. Its 
an input to the ReplaceProduct API, in the step ahead and represents the Reference 
whose Instance replaces an existing Instance in the input model.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Step8"></a>Replacing Child Instance with an Instance of the New Version 
of the Child Reference</h3>
<p>Finally we have a call to the API which actually replaces an existing Child Instance 
under a PLM Product Reference (here the Root Reference) with an Instance of another 
Product Reference.</p>
<pre class="code">...
	CATBoolean <strong>iAllInstances</strong> = FALSE;
	hr = poInputCmp-&gt;<strong>ReplaceProduct</strong>(poOldChildInst,	
				     poNewChildRef,
				     iAllInstances,
				     poNewChildInst);
	...</pre>
<p>There could be several Child Instances within a product model, instantiated from 
the same Product Reference as the one input to the ReplaceProduct API, for replacement.</p>
<p>The CATBoolean iAllInstances argument if set to TRUE, replaces all these Instances 
with an Instance of the Product Reference input. If set to FALSE, it restricts the 
replacement only to the input Child Instance.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h3><a name="Epilog"></a>Epilog</h3>
<p>The CAAPstReplaceInstance use case ends by simply closing the PLM session. Since 
all PS use cases necessarily conclude by closing the PLM session, we have a dedicated 
article on this topic viz. &quot;Conecting to V6 Server&quot; [<a href="#References">2</a>].</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="InShort"></a>In Short</h2>
<p>The Use Case has illustrated the steps involved in replacing a Child Instance 
within a product model with an Instance of another Product Reference input. The 
Instance for replacement should necessarily be a direct Child under Root.</p>
<p>Here we created a new version of the Child Reference, an instance of which replaced 
an existing Child Instance. But we can have any other Product Reference, as well.</p>
<p>Also, we have an option of either replacing a single Child Instance or all Instances 
of its Reference in the product model with an Instance of another Product Reference.</p>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tr>
		<td>[1]</td>
		<td>
		<a href="../CAADocUseCases/CAADocRunSample.htm">
		Building and Launching a Use Case</a></td>
	</tr>
	<tr>
		<td>[2]</td>
		<td>
		<a href="../CAAPlmServerAccess/CAAAdpUcBasicBatch.htm">
		Connecting to V6 Server</a></td>
	</tr>
	<tr>
		<td>[3]</td>
		<td>
		<a href="../CAAPlmServerAccess/CAAAdpUcQueryOpen.htm">
		Querying, Expanding &amp; Opening PLM Object</a></td>
	</tr>
	<tr>
		<td>[4]</td>
		<td>
		<a href="../CAAPlmServerAccess/CAAPlmTaCATIAdpPLMIdentificator.htm">
		Understanding PLM Component Identificator</a></td>
	</tr>
	<tr>
		<td>[5]</td>
		<td>
		<a href="../CAAOmbPLMCompMngt/CAAAdpTaBAGMechanism.htm">
		Understanding PLM Component Life Cycle</a></td>
	</tr>
	<tr>
		<td>[6]</td>
		<td>
		<a href="../CAAPlmServerAccess/CAAPlmTaVersioningPrinciples.htm">
		Understanding PLM Versioning</a></td>
	</tr>
</table>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="History"></a>History</h2>
<table class="history">
	<tr>
		<td>Version: <strong>1</strong> [Dec 2006]</td>
		<td>Document created</td>
	</tr>
</table>
<script type="text/javascript">insertLinkToTop();</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
