<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">

<head>
<meta http-equiv="Content-Language" content="en-us" />
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<meta name="devlang" content="idl" />
<link rel="stylesheet" type="text/css" href="../CAADocStyleSheets/caav5.css"/>
<script type="text/javascript" src="../CAADocJavaScript/DSDocTocToc.js">/* */</script>
<script type="text/javascript" src="../CAADocJavaScript/DSDocHighlight.js">/* */</script>
<script type="text/javascript" src="../CAADocJavaScript/submit.js">/* */</script>
<title>Modifying PLM Attributes of a Selected Product Object</title>
</head>

<body onload="highlightSearchTerms();">

<table class="table1">
	<tbody>
	<tr>
		<td class="DocHeader3">
		<table class="DocHeader">
			<tbody>
			<tr>
				<td class="DocHeader1" colspan="2">
				<h1>Modifying PLM Attributes of a Selected Product Object</h1>
				</td>
			</tr>
			<tr>
				<td class="DocHeader4" colspan="2">&nbsp;</td>
			</tr>
			<tr>
				<td class="DocHeader3">
				<table class="DocHeaderIntro">
					<tbody>
					<tr>
						<td class="Intro1">
						<p class="header"><a name="hj-top"></a>This use case selects 
						and retrieves the PLM object from the CATIA spec tree and 
						retrieves and modifies its PLM Attribute (V_description). 
						In the process it also illustrates that a PLM Attribute 
						is associated with an Instance-Reference model.</p>
						<hr class="header" /></td>
					</tr>
					<tr>
						<td class="Intro2"><span class="run-in">Before you begin:</span> 
						Note that:<ul>
							<li>Launch CATIA </li>
							<li>Load a Product from database or create one before 
							launching the macro </li>
							<li>Keep Product editor active before launching the 
							macro </li>
						</ul>
						<p><span class="run-in">Where to find the macro:<a href="CAAScdPstUcDisplayAndModifyProductAttrFromSelectionSource.htm">
						</a></span>
						<a href="CAAScdPstUcDisplayAndModifyProductAttrFromSelectionSource.htm">
						CAAScdPstUcDisplayAndModifyProductAttrFromSelectionSource.htm</a></p>
						</td>
					</tr>
				</tbody>
				</table>
				</td>
				<td class="DocHeader2">
				<table class="DocTopics">
					<tbody>
					<tr>
						<td class="TopicsTitle">Related Topics</td>
					</tr>
					<tr>
						<td><a href="../CAAScdInfInfrastructure/CAAInfObjEditor.htm">Editor Object</a></td>
					</tr>
					<tr>
						<td><a href="../CAAScdInfInfrastructure/CAAInfObjSelection.htm">Selection Object</a></td>
					</tr>
					<tr>
						<td><a href="CAAScdPstTocProductStructure.htm">Product Object Model Map </a></td>
					</tr>
				</tbody>
				</table>
				</td>
			</tr>
		</tbody>
		</table>
		</td>
	</tr>
</tbody>
</table>
<table class="indented">
	<tbody>
	<tr>
		<td>
		<p>This use case can be divided in 4 steps</p>
		<ol>
			<li><a href="#Step1">Retrieve active editor</a></li>
			<li><a href="#Step2">Retrieve Selection object from active editor</a></li>
			<li><a href="#Step4">Display and Modify PLM Attributer Value</a></li>
		</ol>
		</td>
	</tr>
</tbody>
</table>
<table class="table1">
	<tbody>
	<tr>
		<td>
		<ol class="task">
			<li>
			<p><a name="Step1"></a>Retrieves Active Editor from CATIA</p>
			<p>We retrieve the Selection Object from CATIA, to enable us to select 
			the vertices in the steps ahead.</p>
			<pre class="code">...
    <span class="keyword">Dim</span> oCurrentActiveEditor <span class="keyword">As</span> Editor<strong>
</strong><span class="keyword">    Set</span> oCurrentActiveEditor = CATIA.<strong>ActiveEditor</strong>
...</pre>
			<p>The <em>ActiveEditor</em> property of the Application Object, CATIA 
			returns the Editor, <code>oCurrentActiveEditor</code> which is currently 
			active.</p>
			<p>Retrieves Selection object from Active Editor</p>
			<pre class="code">...
<span class="keyword">    Dim</span> oObjSelection
<span class="keyword">    Set</span> oObjSelection = oCurrentActiveEditor.<strong>Selection</strong>
...</pre>
			<p>A call to <em>Selection</em> Property of the Active Editor returns
			<code>oObjSelection</code>, a <code>Selection </code>object. It is significant 
			to note here that we have not declared a type for <code>oObjSelection
			</code>. The section &quot;Virtual Function Table Compatibility&quot; in the Technical 
			Article &quot;About Automation Languages, Debug, and Compatibility&quot; [<a href="#References">1</a>] 
			provides an explanation for why these variables are not typed.</p>
			</li>
			<li>
			<p><a name="Step2"></a>Retrieve Selection object from active 
			editor</p>
			<ol>
				<li>
				<p>Update selection object with the search criteria 
				and prompt for selection</p>
				<pre class="code">...
<span class="keyword">Dim</span> oInputObjectType(2)
oInputObjectType(2) = &quot;VPMRootOccurrence&quot;
oInputObjectType(1) = &quot;VPMOccurrence&quot;
oInputObjectType(0) = &quot;VPMRepInstance&quot;

<span class="keyword">Dim</span> strStatus<strong> </strong><span class="keyword">As</span> String
strStatus = oObjSelection.<strong>SelectElement</strong>(<strong>oInputObjectType</strong>, &quot;Select a Element from spec tree&quot;, False)
...</pre>
				<p>The PLM objects that you can select (if the current 
				editor is VPM Editor) are <strong>VPMRootOccurrence</strong>, <strong>VPMOccurrence</strong> 
				and <strong>VPMRepInstance</strong> types. These types are appended to an 
				array <code>oInputObjectType</code>, which now represents the select 
				criteria. The selection object <code>oObjSelection</code> is then 
				updated with this select criteria, with a call to <em>SelectElement</em> 
				method. Since the last argument is false, the end user will always 
				be invited to select something in the spec tree, or the 3D Viewer, 
				though an entity (of the type set as filter in the selection criteria) 
				has already been selected by the end-user.</p>
				</li>
				<li>
				<p>Retrieve Selected element and display its type
				</p>
				<pre class="code">...
<span class="keyword">Dim</span> oSelectedElement <span class="keyword">As</span> <strong>SelectedElement</strong>
<span class="keyword">Set</span> oSelectedElement<strong> </strong> =  oObjSelection.Item(1)	
			
MsgBox &quot;Type is &quot; + oSelectedElement.Type
...</pre>
				<p>The <em>Item</em> method on <code>oObjSelection</code>, returns 
				the iIndex-th <code>SelectedElement</code> Object contained by the 
				current selection.</p>
				<p>Next, <em>Type</em> property on the <code>oSelectedElement,
				</code>returns selected object type</p>
				<table>
					<caption><a name="Fig.1"></a>Fig.1 Type of The Selected Product 
					Object</caption>
					<tbody>
					<tr>
						<td>
						<img alt="Display And Modify Product Attribute From Selection" src="CAAScdPstUcDisplayAndModifyProductAttrFromSelection_image1.jpg" width="140" height="107"/></td>
					</tr>
				</tbody>
				</table>
				<p>This will show the type of object which has been selected by 
				user interactively from spec tree. This type could be a VPMOccurrence 
				or VPMRootOccurrence (type defined by an Occurrence Model) or the 
				type could be a VPMRepInstance (the type defined by an Instance-Reference 
				model). The type will be seen as shown in [<a href="#Fig.1">Fig.1</a>].</p>
				</li>
				<li>
				<p>Retrieve the PLM Entities underlying the user selection 
				in CATIA spec tree , or the 3D Viewer</p>
				<p>It is significant to note that the PLM Attributes 
				are actually associated NOT with the entities of an Occurrence model 
				but with those of an Instance/Reference model. Since the user in 
				this case has selected an entity from the spec tree in CATIA, he 
				has the liberty to either select an Occurrence or a Rep Instance.Hence 
				if the selected entity is an Occurrence, we seek the underlying 
				PLM entity (Instance / Reference). While if the selected entity 
				is a Rep Instance, we can very well go ahead directly with setting 
				its PLM Attributes.</p>
				<p>We begin with the case when a Product Rep Inst is 
				selected </p>
				<pre class="code">...
<span class="keyword">Dim</span> oVPMEntityOnSelectedObject <span class="keyword">As</span> <strong>PLMEntity</strong>
<span class="keyword">If</span> (oSelectedElement.Type = &quot;<strong>VPMRepInstance</strong>&quot;) <span class="keyword">Then</span>

<span class="keyword">    Set</span> oVPMEntityOnSelectedObject = oSelectedElement<strong>.Value</strong>
...</pre>
				<p>The <em>Type</em> property on the <code>oSelectedElement,
				</code>returns the Automation type (in this case VPMRepInstance) 
				of the Product Component underlying the selected entity. </p>
				<p>Then a <em>Value</em> property on the <code>oSelectedElement,
				</code>returns the <code>PLMEntity</code> type object <code>oVPMEntityOnSelectedObject</code> 
				underlying the entity selected in the spec tree, or the 3D Viewer. 
				A Rep Instance in this case, as a feature is selected, since for 
				a feature in the spec tree the nearest aggregating PLM Entity which 
				conforms to the selection criteria is a Rep Instance. </p>
				<p>On the other hand, if the automation type of the 
				underlying PLM entity is VPMRootOccurrence or VPMOccurrence, it 
				is treated as the code below depicts.</p>
				<pre class="code">...
<span class="keyword">ElseIf</span> (oSelectedElement.Type = &quot;<strong>VPMRootOccurrence</strong>&quot; Or oSelectedElement.Type = &quot;<strong>VPMOccurrence</strong>&quot;) <span class="keyword">Then</span>

    <span class="keyword">Dim</span> oVPMOccOnSelectedObject <span class="keyword">As</span> <strong>PLMOccurrence</strong>
    <span class="keyword">Set</span> oVPMOccOnSelectedObject = <strong>oSelectedElement.Value</strong>

    <span class="keyword">Set</span> <strong>oVPMEntityOnSelectedObject</strong> = oVPMOccOnSelectedObject.<strong>PLMEntity</strong>

<span class="keyword">End</span> <span class="keyword">If</span>
...</pre>
				<p>The <em>Type</em> property on the <code>oSelectedElement,
				</code>returns the Automation type in this case returns a <code>
				VPMRootOccurrence</code> or <code>VPMOccurrence</code> based on 
				the selection.</p>
				<p>Then a <em>Value</em> property on the <code>oSelectedElement,
				</code>returns the PLM Occurrence type, oVPMOccOnSelectedObject.</p>
				<p>Next a <em>PLMEntity</em> property of <code>oVPMOccOnSelectedObject</code> 
				returns <code>oVPMEntityOnSelectedObject</code> (a <code>PLMEntity</code> 
				type on the underlying First Instance or Reference)</p>
				</li>
			</ol>
			</li>
			<li>
			<p><a name="Step3"></a><a name="Step4"></a>Display and 
			Modify PLM Attributer Value</p>
			<ol class="task" style="list-style-type: lower-roman">
				<li>
				<p>Retrieve and display the value of PLM_ExternalID 
				of selected Object </p>
				<p>Now that we have retrieved the PLM Entity from the 
				user selection in above step [<a href="#Step2">#</a>], we can retrieve 
				and display the value of its PLM Attributes (in this case, PLM_ExternalID)</p>
				<pre class="code">...
<span class="keyword">Dim</span> strValuePID <span class="keyword">As</span> String
strValuePID = <strong>oVPMEntityOnSelectedObject</strong>.<strong>GetAttributeValue</strong>(&quot;<strong>PLM_ExternalID</strong>&quot;)

MsgBox (strValuePID)
...</pre>
				<p>Return a <strong>PLM_ExternalID</strong><strong> </strong>
				attribute value from the <code>PLMEntity</code><strong> </strong>object using 
				the <em>GetAttributeValue</em><strong> </strong>method. </p>
				<table>
					<caption><a name="Fig.2"></a>Fig.2 PLM_ExternalID Attribute 
					Value of Selected Object </caption>
					<tbody>
					<tr>
						<td>
						<img alt="Display And Modify Product Attribute From Selection" src="CAAScdPstUcDisplayAndModifyProductAttrFromSelection_image2.jpg" width="104" height="107"/></td>
					</tr>
				</tbody>
				</table>
				<p>The above [<a href="#Fig.2">Fig.3</a>] shows the PLM_ExternalID 
				attribute value.</p>
				</li>
				<li>
				<p>Modify the V_description Attribute value of PLM 
				entity selected</p>
				<p>Retrieve and display the value of V_description 
				before re-valuation</p>
				<pre class="code">...
<span class="keyword">Dim</span> strAttrValueV_description<span class="keyword"> As</span> String
strAttrValueV_description = <strong>oVPMEntityOnSelectedObject</strong>.<strong>GetAttributeValue</strong>(&quot;<strong>V_description</strong>&quot;)

MsgBox (strAttrValueV_description)
...</pre>
				<p>Return a <strong>V_description</strong> attribute value from 
				the <code>PLMEntity </code>object using the <em>GetAttributeValue</em><strong>
				</strong>method. </p>
				<table>
					<caption><a name="Fig.3"></a>Fig.3 V_description Attribute Value 
					Before Change</caption>
					<tbody>
					<tr>
						<td>
						<img alt="Display And Modify Product Attribute From Selection" src="CAAScdPstUcDisplayAndModifyProductAttrFromSelection_image3.jpg" width="104" height="95"/></td>
					</tr>
				</tbody>
				</table>
				<p>The above [<a href="#Fig.3">Fig.3</a>] shows V_description attribute 
				value before revaluation. (before re-valuation value = blank)</p>
				<p>Modify the V_description Attribute value</p>
				<pre class="code">...
<strong>oVPMEntityOnSelectedObject</strong>.<strong>SetAttributeValue</strong> &quot;<strong>V_description</strong>&quot;, &quot;<strong>NewDescription</strong>&quot;
...</pre>
				<p>Valuate a <strong>V_description </strong>attribute value with 
				new value of <code>PLMEntity </code>object using the <em>SetAttributeValue</em> 
				method. </p>
				<p>Retrieve and display the value of V_description 
				attribute after re-valuation</p>
				<pre class="code">...
strAttrValueV_description= <strong>oVPMEntityOnSelectedObject</strong>.<strong>GetAttributeValue</strong>(&quot;<strong>V_description</strong>&quot;)

MsgBox (strAttrValueV_description)
...</pre>
				<p>Return a <strong>V_description</strong> attribute value from 
				the <code>PLMEntity </code>object using the <em>GetAttributeValue</em><strong>
				</strong>method. </p>
				<table>
					<caption><a name="Fig.4"></a>Fig.4<br />
					V_description Attribute Value After Change</caption>
					<tbody>
					<tr>
						<td>
						<img alt="Display And Modify Product Attribute From Selection" src="CAAScdPstUcDisplayAndModifyProductAttrFromSelection_image4.jpg" width="104" height="107"/></td>
					</tr>
				</tbody>
				</table>
				<p>The above [<a href="#Fig.4">Fig.4</a>] shows V_description attribute 
				value after revaluation.(after re-valuation value = &quot;NewDescription&quot;)</p>
				<p>The PLM Attributes associated with an Instance-Reference model 
				are indeed persistent and hence are SAVED in the underlying database.
				</p>
				</li>
			</ol>
			</li>
		</ol>
		</td>
	</tr>
</tbody>
</table>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<h2><a name="References"></a>References</h2>
<table class="reference">
	<tbody>
	<tr>
		<td>[1]</td>
		<td><a href="../CAAScdInfInfrastructure/CAAInfHints.htm">About 
		Automation Languages, Debug, and Compatibility</a></td>
	</tr>
</tbody>
</table>
<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>

</body>

</html>
