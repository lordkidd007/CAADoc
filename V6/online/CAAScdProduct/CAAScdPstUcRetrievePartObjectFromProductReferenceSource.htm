<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">

<head>
<meta http-equiv="Content-Language" content="en-us" />
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<meta name="devlang" content="idl" />
<link rel="stylesheet" type="text/css" href="../CAADocStyleSheets/caav5.css"/>
<script type="text/javascript" src="../CAADocJavaScript/DSDocTocToc.js">/* */</script>
<script type="text/javascript" src="../CAADocJavaScript/DSDocHighlight.js">/* */</script>
<script type="text/javascript" src="../CAADocJavaScript/submit.js">/* */</script>
<title>Retrieving Part Object From Product Root Reference Source</title>
</head>

<body onload="highlightSearchTerms();">

<pre>'---------------------------------------------------------------------------------------------------------------------------
'COPYRIGHT DASSAULT SYSTEMES 2009
'---------------------------------------------------------------------------------------------------------------------------
'Retrieving Part Object From Product Root Reference
'Mission: This use case primarily focuses on the methodology to retrieve the &quot;Part&quot; object, associated with a 3DShape
'         representation in Product context. The UC actually navigates down a Product Reference which aggregates beneath it,
'    this 3DShape Representation.
'Steps:
'        1- Search and Retrieve the Product Reference (Root) from underlying database
'        2- Retrieve Part Object associated with the 3DShape aggregated beneath the Root
'           2.1- Retrieve list of Product Representation Instance beneath Product Reference
'           2.2- Retrieve the Product Representation Instance(First element among the list of instances retrieved earlier)
'           2.3- Retrieve the Representation Reference of the Representation instance (we suppose later it is a 3D Shape)
'           2.4- Retrieve Part object associated with the 3DShape

'---------------------------------------------------------------------------------------------------------------------------

' Be careful: this piece of code has been written with a specific Product Reference type (VPMReference). If your ENOVIA

' installation does not contain this Product Modele type, use you own Product Reference type.

' You have just to change the contents of the strTheProductReferenceType variable defined just below (in main Routine).

'---------------------------------------------------------------------------------------------------------------------------
'Global variables

'The product Reference type

Dim strTheProductReferenceType As String

'
'==========================================================================================================================
' Main Routine
'==========================================================================================================================
'
Sub RetrievePartFromProdReference()
'Error handling
On Error GoTo ErrorSub

    strTheProductReferenceType = &quot;VPMReference&quot;

   '1- Search and Retrieve the Product Reference (Root) from underlying database
    Dim oVPMRootReference As VPMReference
    Set oVPMRootReference = SearchAndRetrieveProdReference
   
    '2- Retrieve Part Object associated with the 3DShape aggregated beneath the Root
    Dim oPart As Part
    Set oPart = RetrievePart(oVPMRootReference)
        
    MsgBox &quot;Success in retrieving Part. Part Name : &quot; + oPart.Name
      
    'Error handling
    GoTo EndSub
ErrorSub:
    MsgBox Err.Description
EndSub:
End Sub
'--------------------------------------------------------------------------------------------
' 2- Retrieve Part Object associated with the 3DShape aggregated beneath the Root
'    Output  : the Part object associated with first aggregated 3DShape
'--------------------------------------------------------------------------------------------
Function RetrievePart(oProdRef) As Part
'Error handling
On Error GoTo ErrorSub
    '2.1- Retrieve list of Product Representation Instance  beneath Product Reference
    Dim oVPMRepInsts As VPMRepInstances
    Set oVPMRepInsts = oProdRef.RepInstances
   
    '2.2- Retrieve the Product Representation Instance (First element among the list of instances retrieved earlier)
    'Please note that here we consider that the first element in the list of Product Representation Instance is 3DShape,
    'else macro will fail in further steps
    Dim oVPMRepInst As VPMRepInstance
    Set oVPMRepInst = oVPMRepInsts.Item(1)

    '2.3-  Retrieve the Representation Reference of the Representation instance  (we suppose later it is a 3D Shape)
    Dim oVPMRepRef As VPMRepReference
    Set oVPMRepRef = oVPMRepInst.ReferenceInstanceOf
        
    MsgBox &quot;Success in retrieving Representation Reference. The PLM_ExternalID value of Representation Reference :&quot; + oVPMRepRef.GetAttributeValue(&quot;PLM_ExternalID&quot;)
            
    '2.4- Retrieve Part object associated with the 3DShape
    'Thanks to GetItem method which ensures that retrieved element is 3DShape since associated element is Part
    Dim oPart As Part
    Set oPart = oVPMRepRef.GetItem(&quot;Part&quot;)
        
    Set RetrievePart = oPart
    
'Error handling
    GoTo EndSub
ErrorSub:
    MsgBox Err.Description + &quot;. Failure since no 3DShape Representation Instance aggregated under Product Root Reference. &quot;
EndSub:
End Function
'--------------------------------------------------------------------------------------------
' 1- Search and retrieve Root Product
'    The search criteria is:
'     - The Product reference type
'     - A PLM_ExternalID value entered by the end user
'     - A revision value entered by the end user
'    Output  : the object containing the result of the search
'--------------------------------------------------------------------------------------------
'
Function SearchAndRetrieveProdReference() As VPMReference
    'Error handling
    On Error GoTo ErrorSub

    'Retrieves the Search service from CATIA session
    Dim oSearchService As SearchService
    Set oSearchService = CATIA.GetSessionService("Search") 
    
    'Search in database for Product Reference Type
    Dim oDBSearch As DatabaseSearch
    Set oDBSearch = SearchProduct(oSearchService)
    
    'Opens the Product and retrieves its Editor
    Dim oProdEditor As Editor
    Set oProdEditor = OpenProductAndGetEditor(oDBSearch)
       
    'Retrieves the &quot;PLMProductService&quot; service object that handles objects controlled by a VPM Editor
    Dim oProductRootService As PLMProductService
    Set oProductRootService = oProdEditor.GetService(&quot;PLMProductService&quot;)
    
    'Retrieve the root occurrence corresponding to the root product
    Dim oVPMRootOccOnRoot As VPMRootOccurrence
    Set oVPMRootOccOnRoot = oProductRootService.RootOccurrence
    
    'Retrieve the Root Reference from the Root Occurrence
    Dim oVPMRoot As VPMReference
    Set oVPMRoot = oVPMRootOccOnRoot.ReferenceRootOccurrenceOf
    
    'Return Root Product
    Set SearchAndRetrieveProdReference = oVPMRoot
     
    'Error handling
    GoTo EndSub
ErrorSub:
    MsgBox Err.Description
EndSub:
End Function

'--------------------------------------------------------------------------------------------
' Searches for a Product in database
'    The search criteria is:
'     - The Product reference type
'     - A PLM_ExternalID value entered by the end user
'     - A revision value entered by the end user
'    Output  : the object containing the result of the search
'--------------------------------------------------------------------------------------------
'
Function SearchProduct(oSearchService) As DatabaseSearch
   'Error handling
   On Error GoTo ErrorSub
    
    'Retrieves the Database attribute from Search service
    Dim oDBSearch As DatabaseSearch
    Set oDBSearch = oSearchService.DatabaseSearch
    
    'Builds the Query criteria for Search on underlying database
    'Prompts the user to input the PLM_ExternalID for search purpose
    Dim strInputPLMIDName As String
    strInputPLMIDName = InputBox(&quot;Please enter the PLM_ExternalID to search&quot;, &quot;Enter PLM_ExternalID&quot;)
    
    'Prompts the user to input the revision for search purpose
    Dim strInputRevision As String
    strInputRevision = InputBox(&quot;Please enter the revision to search&quot;, &quot;Enter revision&quot;)
 
    'Sets the type of objects to search for
    oDBSearch.BaseType = strTheProductReferenceType
           
    'Updates the PLM Search object created in the above steps with the attribute criteria provided by the user as an input
    oDBSearch.AddEasyCriteria &quot;PLM_ExternalID&quot;, strInputPLMIDName
    oDBSearch.AddEasyCriteria &quot;revision&quot;, strInputRevision
       
    'Triggers the Search
    oSearchService.Search
    
    'Valuates the output
    Set SearchProduct = oDBSearch
    
    'Error handling
    GoTo EndSub
ErrorSub:
    MsgBox Err.Description
EndSub:
    
End Function
'
'--------------------------------------------------------------------------------------------
' Opens the Product and retrieves its Editor
'    Input  : the object containing the result of the previous search
'    Output : the editor containing the opened Product
'--------------------------------------------------------------------------------------------
'
Function OpenProductAndGetEditor(oDBSearch) As Editor
   'Error handling
   On Error GoTo ErrorSub
    
    'Retrieves the list of PLM Entities from the PLM Search object
    Dim oPLMProdRefAsEntities As PLMEntities
    Set oPLMProdRefAsEntities = oDBSearch.Results
    
    'Ensures the search results retrieves atleast one PLM Entity
    If oPLMProdRefAsEntities.Count &gt; 1 Then
        MsgBox &quot;Please enter a query criteria which outputs a unique PLM Component for further processing&quot;
        GoTo EndSub
    ElseIf oPLMProdRefAsEntities.Count = 0 Then
        MsgBox &quot;No result for the input criteria&quot;
        GoTo EndSub
    End If
    'Retrieves first PLM Entity from the PLMEntities collection object
    Dim oPLMProdRefAsPLMEntity As PLMEntity
    Set oPLMProdRefAsPLMEntity = oPLMProdRefAsEntities.Item(1)
    
    'Call the Open Service to open the product
    Dim oOpenService As PLMOpenService
    Set oOpenService = CATIA.GetSessionService(&quot;PLMOpenService&quot;)
    
    'Opens the PLM Component in the VPM editor
    Dim oProductEditor As Editor
    oOpenService.PLMOpen oPLMProdRefAsPLMEntity, oProductEditor
        
    'Valuates the output
    Set OpenProductAndGetEditor = oProductEditor
    
   'Error handling
    GoTo EndSub
ErrorSub:
    MsgBox Err.Description
EndSub:
End Function</pre>

<script type="text/javascript">insertLinkToTop()</script>
<!-- -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-comment-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= -->
<script type="text/javascript">insertCopyright();</script>


</body>

</html>
